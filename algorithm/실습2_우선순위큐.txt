문제 1
#include <stdio.h>
#include <malloc.h>
#pragma warning(disable:4996)

// 가장 큰 값을 맨 오른쪽으로 보내는 제자리 선택 정렬
int* inPlaceSelectionSort(int* arr, int size)
{
	int i, j, k = 0, max, tmp;

	for (i = size - 1; i >= 0; i--)  // 오른쪽부터 채우기 때문에 시작 인덱스도 맨 오른쪽부터 시작
	{
		max = i; // 제일 큰 값을 찾을 인덱스 max를 정렬할 위치인 i로 초기화
		for (j = 0; j <= size - 2 - k; j++) // 처음부터 정렬되지 않은 범위까지 반복하며 
		{
			if (arr[j] > arr[max])
			{
				max = j; // 최대값을 찾아 그 인덱스를 max에 저장
			}
		}
		tmp = arr[i];
		arr[i] = arr[max];
		arr[max] = tmp; // 제일 큰 값을 i자리와 교환
		k++; // 맨 오른쪽이 추가로 정렬되었기에 k 증가

		/*
		for (int x = 0; x < size; x++)
		{
			printf(" %d", arr[x]);
		}
		printf("\n");
		// 정렬 과정 출력 반복문
		*/
	}

	return arr;
}

int main()
{
	int size, i;
	int* arr;
	int* result;

	scanf("%d", &size);

	arr = (int*)malloc(sizeof(int)*size);

	for (i = 0; i < size; i++)
	{
		scanf("%d", &arr[i]);
	}

	result = inPlaceSelectionSort(arr, size);

	for (i = 0; i < size; i++)
	{
		printf(" %d", result[i]);
	}

	return 0;

}
=============================================================================================
문제 2
#include <stdio.h>
#include <malloc.h>
#pragma warning(disable:4996)

int* inPlaceInsertSort(int* arr, int size)
{
	int i, j, tmp;

	for (i = 1; i < size; i++)
	{
		tmp = arr[i]; // tmp에 정렬할 원소를 저장
		j = i; // 정렬 대상 원소의 인덱스를 j에 저장

		while ((j > 0) && (arr[j - 1]) > tmp) // 이미 정렬된 부분에서 정렬할 원소의 위치를 찾음
		{
			arr[j] = arr[j - 1]; // 정렬할 원소보다 작은 원소가 나올 때까지 배열을 한칸씩 뒤로 미룸 
			j--;
		}

		arr[j] = tmp;// 정렬할 원소를 제 자리에 저장함
		/*
		for (int x = 0; x < size; x++)
		{
		printf(" %d", arr[x]);
		}
		printf("\n");
		// 정렬 과정 출력 반복문
		*/
	}

	return arr;
}

int main()
{
	int size, i;
	int* arr;
	int* result;

	scanf("%d", &size);

	arr = (int*)malloc(sizeof(int)*size);

	for (i = 0; i < size; i++)
	{
		scanf("%d", &arr[i]);
	}

	result = inPlaceInsertSort(arr, size);

	for (i = 0; i < size; i++)
	{
		printf(" %d", result[i]);
	}

	return 0;

}
=================================================================================
문제 3
#include <stdio.h>
#include <malloc.h>
#include <time.h>
#include <stdlib.h>
#pragma warning(disable:4996)

int* inPlaceInsertSort(int* arr, int size)
{
	int i, j, tmp;

	for (i = 1; i < size; i++)
	{
		tmp = arr[i]; // tmp에 정렬할 원소를 저장
		j = i; // 정렬 대상 원소의 인덱스를 j에 저장

		while ((j > 0) && (arr[j - 1]) > tmp) // 이미 정렬된 부분에서 정렬할 원소의 위치를 찾음
		{
			arr[j] = arr[j - 1]; // 정렬할 원소보다 작은 원소가 나올 때까지 배열을 한칸씩 뒤로 미룸 
			j--;
		}

		arr[j] = tmp; // 정렬할 원소를 제 자리에 저장함

	}

	return arr;
}

int* inPlaceSelectionSort(int* arr, int size)
{
	int i, j, k = 0, max, tmp;

	for (i = size - 1; i >= 0; i--)  // 오른쪽부터 채우기 때문에 시작 인덱스도 맨 오른쪽부터 시작
	{
		max = i; // 제일 큰 값을 찾을 인덱스 max를 정렬할 위치인 i로 초기화
		for (j = 0; j <= size - 2 - k; j++) // 처음부터 정렬되지 않은 범위까지 반복하며 
		{
			if (arr[j] > arr[max])
			{
				max = j; // 최대값을 찾아 그 인덱스를 max에 저장
			}
		}
		tmp = arr[i];
		arr[i] = arr[max];
		arr[max] = tmp; // 제일 큰 값을 i자리와 교환
		k++; // 맨 오른쪽이 추가로 정렬되었기에 k 증가
	}

	return arr;
}

int* reverseInPlaceSelectionSort(int* arr, int size)
{
	int i, j, k = 0, max, tmp;

	for (i = size - 1; i >= 0; i--)  
	{
		max = i; 
		for (j = 0; j <= size - 2 - k; j++) 
		{
			if (arr[j] < arr[max])
			{
				max = j; 
			}
		}
		tmp = arr[i];
		arr[i] = arr[max];
		arr[max] = tmp; 
		k++;
	}
	
	return arr;
}

int main()
{
	int size, i;
	int* arr;
	int* arr2;
	int* result[2];
	clock_t start[2], end[2];

	srand((unsigned)time(NULL));

	scanf("%d", &size);

	arr = (int*)malloc(sizeof(int)*size);
	arr2 = (int*)malloc(sizeof(int)*size);;

	for (i = 0; i < size; i++)
	{
		arr[i] = arr2[i] = rand();
	}

	//inPlaceInsertSort(arr, size);
	//inPlaceInsertSort(arr2, size);
	//reverseInPlaceSelectionSort(arr, size);
	//reverseInPlaceSelectionSort(arr2, size);

	start[0] = clock();
	result[0] = inPlaceSelectionSort(arr, size);
	end[0] = clock();

	start[1] = clock();
	result[1] = inPlaceInsertSort(arr2, size);
	end[1] = clock();

	printf("선택 정렬 : %0.4lfs\n", (double)(end[0] - start[0]) / (CLOCKS_PER_SEC));
	printf("삽입 정렬 : %0.4lfs\n", (double)(end[1] - start[1]) / (CLOCKS_PER_SEC));

	return 0;

}