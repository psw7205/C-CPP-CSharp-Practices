문제 1 분리연쇄
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct Node {
	int key;
	struct Node *next;
}Node;

void MyInsert(Node *hash, int key, int m)
{
	int idx = key % m;
	Node *head = hash + idx;
	Node *newNode = (Node*)malloc(sizeof(Node));

	newNode->key = key;
	newNode->next = head->next;
	head->next = newNode;

	return;
}

void MySearch(Node *hash, int key, int m)
{
	int idx = key % m;
	int i = 1;
	Node *currentNode = (hash + idx)->next;

	while (currentNode != NULL)
	{
		if (currentNode->key == key)
		{
			printf("%d\n", i);
			return;
		}
		i++;
		currentNode = currentNode->next;
	}

	printf("0\n");
	return;
}

void MyDelete(Node *hash, int key, int m)
{
	int idx = key % m;
	int i = 1;
	Node *currentNode = (hash + idx)->next;
	Node *tmp = (hash + idx);

	while (currentNode != NULL)
	{
		if (currentNode->key == key)
		{
			printf("%d\n", i);
			tmp->next = currentNode->next;
			free(currentNode);
			return;
		}
		i++;
		tmp = currentNode;
		currentNode = currentNode->next;
	}

	printf("0\n");
	return;
}

void MyPrint(Node *hash, int key, int m)
{
	int i = 0;
	Node *currentNode;

	for (i = 0; i < m; i++)
	{
		currentNode = (hash + i)->next;
		while (currentNode != NULL)
		{
			printf(" %d", currentNode->key);
			currentNode = currentNode->next;
		}
	}
	printf("\n");
	return;
}

int main()
{
	int m, i, key;
	Node *hash;
	char tmp;

	scanf("%d", &m);

	hash = (Node*)malloc(sizeof(Node)*m);

	for (i = 0; i < m; i++)
	{
		hash[i].key = i;
		hash[i].next = NULL;
	}

	while (1)
	{
		scanf("%c", &tmp);

		if (tmp == 'e')
			break;

		switch (tmp)
		{
		case 'i':
			scanf("%d", &key);
			MyInsert(hash, key, m);
			break;

		case 's':
			scanf("%d", &key);
			MySearch(hash, key, m);
			break;

		case 'd':
			scanf("%d", &key);
			MyDelete(hash, key, m);
			break;

		case 'p':
			MyPrint(hash, key, m);
			break;
		default:
			break;
		}
	}

	free(hash);
	return 0;
}


==================================================================================
문제 2
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct Node {
	int key;
}Node;

void MyInsert(Node *hash, int key, int m)
{
	int idx = key % m;
	int i = 0;
	int realIdx;

	while (i < m)
	{
		realIdx = (idx + i) % m;

		if ((hash + realIdx)->key == 0)
		{
			(hash + realIdx)->key = key;
			printf("%d\n", realIdx);
			return;
		}
		else
		{
			i++;
			printf("C");
		}
	}

	return;
}

void MySearch(Node *hash, int key, int m)
{
	int idx = key % m;
	int i = 0;
	int realIdx;

	while (i < m)
	{
		realIdx = (idx + i) % m;

		if ((hash + realIdx)->key == 0)
		{
			printf("-1\n");
			return;
		}
		else if ((hash + realIdx)->key == key)
		{
			printf("%d %d\n", realIdx, (hash + realIdx)->key);
			return;
		}
		else
		{
			i++;
		}
	}

	return;
}

int main()
{
	int m, n, i, cnt = 0, key;
	Node *hash;
	char tmp;

	scanf("%d %d", &m, &n);

	hash = (Node*)malloc(sizeof(Node)*m);

	for (i = 0; i < m; i++)
	{
		hash[i].key = 0;
	}

	while (1)
	{
		scanf("%c", &tmp);

		if (tmp == 'e')
			break;

		switch (tmp)
		{
		case 'i':
			if (cnt == n)
				break;
			scanf("%d", &key);
			MyInsert(hash, key, m);
			cnt++;
			break;

		case 's':
			scanf("%d", &key);
			MySearch(hash, key, m);
			break;

		default:
			break;
		}
	}

	free(hash);
	return 0;
}
==================================================================================
문제 3
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct Node {
	int key;
}Node;

void MyInsert(Node *hash, int key, int m, int q)
{
	int idx = key % m;
	int i = 0;
	int realIdx;

	while (i < m)
	{
		realIdx = (idx + i * (q - key % q)) % m;

		if ((hash + realIdx)->key == 0)
		{
			(hash + realIdx)->key = key;
			printf("%d\n", realIdx);
			return;
		}
		else
		{
			i++;
			printf("C");
		}
	}

	return;
}

void MySearch(Node *hash, int key, int m, int q)
{
	int idx = key % m;
	int i = 0;
	int realIdx;

	while (i < m)
	{
		realIdx = (idx + i * (q - key % q)) % m;

		if ((hash + realIdx)->key == 0)
		{
			printf("-1\n");
			return;
		}
		else if ((hash + realIdx)->key == key)
		{
			printf("%d %d\n", realIdx, (hash + realIdx)->key);
			return;
		}
		else
		{
			i++;
		}
	}

	return;
}

void MyPrint(Node *hash, int m)
{
	int i = 0;
	for (i = 0; i < m; i++)
	{
		printf(" %d", (hash + i)->key);
	}
	printf("\n");
	return;
}

int main()
{
	int m, n, q, i, cnt = 0, key;
	Node *hash;
	char tmp;

	scanf("%d %d %d", &m, &n, &q);

	hash = (Node*)malloc(sizeof(Node)*m);

	for (i = 0; i < m; i++)
	{
		hash[i].key = 0;
	}

	while (1)
	{
		scanf("%c", &tmp);

		if (tmp == 'e')
		{
			MyPrint(hash, m);
			break;
		}
		switch (tmp)
		{
		case 'i':
			if (cnt == n)
				break;
			scanf("%d", &key);
			MyInsert(hash, key, m, q);
			cnt++;
			break;

		case 's':
			scanf("%d", &key);
			MySearch(hash, key, m, q);
			break;
		case 'p':
			MyPrint(hash, m);
			break;
		default:
			break;
		}
	}

	free(hash);
	return 0;
}