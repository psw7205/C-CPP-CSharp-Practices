문제 1
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable:4996)

#define FALSE 0
#define TRUE 1

typedef struct node {
	struct node	*lChild;
	struct node	*rChild;
	struct node *parent;
	int key;
}Node;

Node* getNode(); // 새 노드 생성, 초기화

void expandExternal(Node *tmp);
int findElement(Node *root, int key);
void insertlItem(Node* root, int key);
Node* treeSearch(Node *tmp, int key);
int removeElement(Node *root, int key);
int isExternal(Node *tmp);
Node* inOrderSucc(Node *tmp);
void reduceExternal(Node *root, Node *tmp);
Node* findSibling(Node *tmp);
void preorderPrint(Node *root);

int main()
{
	char ch;
	int key;
	Node *root = getNode();

	while (1)
	{
		scanf("%c", &ch);

		if (ch == 'q')
			break;

		switch (ch)
		{
		case 'i':
			scanf("%d", &key);
			insertlItem(root, key);
			break;

		case 'd':
			scanf("%d", &key);
			key = removeElement(root, key);

			if (key == FALSE)
				printf("X\n");
			else
				printf("%d\n", key);
			break;

		case 's':
			scanf("%d", &key);
			key = findElement(root, key);

			if (key == FALSE)
				printf("X\n");
			else
				printf("%d\n", key);
			break;

		case 'p':
			preorderPrint(root);
			printf("\n");
			break;

		default:
			break;
		}
	}

	return 0;
}

Node* getNode()
{
	Node *tmp = (Node*)malloc(sizeof(Node));
	tmp->key = 0;
	tmp->parent = tmp->lChild = tmp->rChild = NULL;

	return tmp;
}

void expandExternal(Node *tmp)
{
	Node *lChild = getNode();
	Node *rChild = getNode();
	lChild->parent = tmp;
	rChild->parent = tmp;

	tmp->lChild = lChild;
	tmp->rChild = rChild;

	return;
}

Node* findSibling(Node *tmp)
{
	if (tmp->parent->lChild == tmp)
		return tmp->parent->rChild;

	return tmp->parent->lChild;
}

void reduceExternal(Node* root, Node *tmp)
{
	Node *parent = tmp->parent;
	Node *sibling = findSibling(tmp);
	Node *grandParent = parent->parent;

	if (parent == root)
	{
		root = sibling;
		sibling->parent = NULL;
	}
	else
	{
		sibling->parent = grandParent;
		if (parent == grandParent->lChild)
			grandParent->lChild = sibling;
		else
			grandParent->rChild = sibling;
	}

	free(tmp);
	free(parent);
}

int findElement(Node *root, int key)
{
	Node *tmp = treeSearch(root, key);

	if (isExternal(tmp))
		return FALSE;

	return tmp->key;
}

void insertlItem(Node* root, int key)
{
	Node *tmp = treeSearch(root, key);

	if (!isExternal(tmp))
		return;
	else
	{
		tmp->key = key;
		expandExternal(tmp);
		return;
	}
}

Node* treeSearch(Node *tmp, int key)
{
	if (isExternal(tmp))
		return tmp;

	if (key == tmp->key)
		return tmp;
	else if (key < tmp->key)
		return treeSearch(tmp->lChild, key);
	else
		return treeSearch(tmp->rChild, key);
}

int removeElement(Node* root, int key)
{
	Node *tmp = treeSearch(root, key);

	if (isExternal(tmp))
		return FALSE;
	else
	{
		Node *z = tmp->lChild;

		if (!isExternal(z))
			z = tmp->rChild;

		if (isExternal(z))
			reduceExternal(root, z);
		else
		{
			Node *y = inOrderSucc(tmp);
			z = y->lChild;
			tmp->key = y->key;
			reduceExternal(root, z);
		}
	}

	return key;
}

int isExternal(Node *tmp)
{
	if (tmp->lChild == NULL && tmp->rChild == NULL)
		return TRUE;

	return FALSE;
}

Node* inOrderSucc(Node *tmp)
{
	tmp = tmp->rChild;
	while (!isExternal(tmp->lChild))
	{
		tmp = tmp->lChild;
	}

	return tmp;
}

void preorderPrint(Node *root)
{
	if (isExternal(root))
		return;

	printf(" %d", root->key);
	preorderPrint(root->lChild);
	preorderPrint(root->rChild);
}
==============================================
문제 2 AVL 트리 삽입
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable:4996)

#define FALSE 0
#define TRUE 1

typedef struct node {
	struct node	*lChild;
	struct node	*rChild;
	struct node *parent;
	int height;
	int key;
}Node;

Node *root;

Node* getNode();
void expandExternal(Node *w);
int findElement(int key);
void insertlItem(int key);
Node* treeSearch(Node *w, int key);
int isExternal(Node *w);
void preorderPrint(Node *tree);
void searchAndFixAfterInsertion(Node *w);
int updateHeight(Node *w);
int isBalanced(Node *w);
int restructure(Node *x, Node *y, Node *z);

int main()
{
	char ch;
	int key;
	root = getNode();

	while (1)
	{
		scanf("%c", &ch);

		if (ch == 'q')
			break;

		switch (ch)
		{
		case 'i':
			scanf("%d", &key);
			insertlItem(key);
			break;

		case 's':
			scanf("%d", &key);
			key = findElement(key);

			if (key == FALSE)
				printf("X\n");
			else
				printf("%d\n", key);
			break;

		case 'p':
			preorderPrint(root);
			printf("\n");
			break;

		default:
			break;
		}
	}

	return 0;
}

Node* getNode()
{
	Node *tmp = (Node*)malloc(sizeof(Node));
	tmp->key = 0;
	tmp->parent = tmp->lChild = tmp->rChild = NULL;
	tmp->height = 0;

	return tmp;
}

void expandExternal(Node *w)
{
	Node *lChild = getNode();
	Node *rChild = getNode();
	lChild->parent = w;
	rChild->parent = w;

	w->lChild = lChild;
	w->rChild = rChild;
	w->height = 1;
	return;
}

int findElement(int key)
{
	Node *w = treeSearch(root, key);

	if (isExternal(w))
		return FALSE;

	return w->key;
}

void insertlItem(int key)
{
	Node *w = treeSearch(root, key);

	if (!isExternal(w))
		return;
	else
	{
		w->key = key;
		expandExternal(w);
		searchAndFixAfterInsertion(w);
		return;
	}

}

Node* treeSearch(Node *w, int key)
{
	if (isExternal(w))
		return w;

	if (key == w->key)
		return w;
	else if (key < w->key)
		return treeSearch(w->lChild, key);
	else
		return treeSearch(w->rChild, key);
}

int isExternal(Node *w)
{
	if (w->lChild == NULL && w->rChild == NULL)
		return TRUE;

	return FALSE;
}

void preorderPrint(Node *tree)
{
	if (isExternal(tree))
		return;

	printf(" %d", tree->key);
	preorderPrint(tree->lChild);
	preorderPrint(tree->rChild);
}

void searchAndFixAfterInsertion(Node *w)
{
	Node *x, *y, *z;

	if (w == root)
		return;

	z = w->parent;
	updateHeight(z);

	while (isBalanced(z))
	{
		if (z == root)
			return;

		z = z->parent;
		updateHeight(z);
	}

	if (z->lChild->height > z->rChild->height)
		y = z->lChild;
	else
		y = z->rChild;

	if (y->lChild->height > y->rChild->height)
		x = y->lChild;
	else
		x = y->rChild;

	restructure(x, y, z);
	return;
}

int updateHeight(Node *w)
{

	Node *l = w->lChild;
	Node *r = w->rChild;
	int h = (l->height > r->height ? l->height : r->height) + 1;

	if (h != w->height)
	{
		w->height = h;
		return TRUE;
	}

	return FALSE;
}

int isBalanced(Node *w)
{

	Node *l = w->lChild;
	Node *r = w->rChild;

	int height = l->height - r->height;

	if (height < 0)
		height = -height;

	if (height < 2)
		return TRUE;

	return	FALSE;
}

int restructure(Node *x, Node *y, Node *z)
{
	Node *a, *b, *c;
	Node *T[4];

	if (z->key < y->key && y->key < x->key)
	{
		a = z;
		b = y;
		c = x;
		T[0] = a->lChild;
		T[1] = b->lChild;
		T[2] = c->lChild;
		T[3] = c->rChild;
	}
	else if (x->key < y->key && y->key < z->key)
	{
		a = x;
		b = y;
		c = z;
		T[0] = a->lChild;
		T[1] = a->rChild;
		T[2] = b->rChild;
		T[3] = c->rChild;
	}
	else if (z->key < x->key && x->key < y->key)
	{
		a = z;
		b = x;
		c = y;
		T[0] = a->lChild;
		T[1] = b->lChild;
		T[2] = b->rChild;
		T[3] = c->rChild;
	}
	else
	{
		a = y;
		b = x;
		c = z;
		T[0] = a->lChild;
		T[1] = b->lChild;
		T[2] = b->rChild;
		T[3] = c->rChild;
	}

	if (root == z)
	{
		root = b;
		b->parent = NULL;
	}
	else if (z->parent->lChild == z)
	{
		z->parent->lChild = b;
		b->parent = z->parent;
	}
	else
	{
		z->parent->rChild = b;
		b->parent = z->parent;
	}

	a->lChild = T[0];
	T[0]->parent = a;
	a->rChild = T[1];
	T[1]->parent = a;
	updateHeight(a);

	c->lChild = T[2];
	T[2]->parent = c;
	c->rChild = T[3];
	T[3]->parent = c;
	updateHeight(c);

	b->lChild = a;
	a->parent = b;
	b->rChild = c;
	c->parent = b;
	updateHeight(b);

	return TRUE;
}


==============================================
문제 3 AVL 트리 삭제
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable:4996)

#define FALSE 0
#define TRUE 1

typedef struct node {
	struct node	*lChild;
	struct node	*rChild;
	struct node *parent;
	int height;
	int key;
}Node;

Node *root;

Node* getNode();
void expandExternal(Node *w);
int findElement(int key);
void insertlItem(int key);
Node* treeSearch(Node *w, int key);
int isExternal(Node *w);
void preorderPrint(Node *tree);
void searchAndFixAfterInsertion(Node *w);
int updateHeight(Node *w);
int isBalanced(Node *w);
Node *restructure(Node *x, Node *y, Node *z);

int removeElement(int key);
Node *findSibling(Node *w);
Node *inOrderSucc(Node *w);
Node *reduceExternal(Node *w);
void searchAndFixAfterRmoval(Node *w);

int main()
{
	char ch;
	int key;
	root = getNode();

	while (1)
	{
		scanf("%c", &ch);

		if (ch == 'q')
			break;

		switch (ch)
		{
		case 'i':
			scanf("%d", &key);
			insertlItem(key);
			break;
		case 'd':
			scanf("%d", &key);
			key = removeElement(key);

			if (key == FALSE)
				printf("X\n");
			else
				printf("%d\n", key);
			break;
		case 's':
			scanf("%d", &key);
			key = findElement(key);

			if (key == FALSE)
				printf("X\n");
			else
				printf("%d\n", key);
			break;

		case 'p':
			preorderPrint(root);
			printf("\n");
			break;

		default:
			break;
		}
	}

	return 0;
}

Node* getNode()
{
	Node *tmp = (Node*)malloc(sizeof(Node));
	tmp->key = 0;
	tmp->parent = tmp->lChild = tmp->rChild = NULL;
	tmp->height = 0;

	return tmp;
}

void expandExternal(Node *w)
{
	Node *lChild = getNode();
	Node *rChild = getNode();
	lChild->parent = w;
	rChild->parent = w;

	w->lChild = lChild;
	w->rChild = rChild;
	w->height = 1;
	return;
}

int findElement(int key)
{
	Node *w = treeSearch(root, key);

	if (isExternal(w))
		return FALSE;

	return w->key;
}

void insertlItem(int key)
{
	Node *w = treeSearch(root, key);

	if (!isExternal(w))
		return;
	else
	{
		w->key = key;
		expandExternal(w);
		searchAndFixAfterInsertion(w);
		return;
	}

}

Node* treeSearch(Node *w, int key)
{
	if (isExternal(w))
		return w;

	if (key == w->key)
		return w;
	else if (key < w->key)
		return treeSearch(w->lChild, key);
	else
		return treeSearch(w->rChild, key);
}

int isExternal(Node *w)
{
	if (w->lChild == NULL && w->rChild == NULL)
		return TRUE;

	return FALSE;
}

void preorderPrint(Node *tree)
{
	if (isExternal(tree))
		return;

	printf(" %d", tree->key);
	preorderPrint(tree->lChild);
	preorderPrint(tree->rChild);
}

void searchAndFixAfterInsertion(Node *w)
{
	Node *x, *y, *z;

	if (w == root)
		return;

	z = w->parent;
	updateHeight(z);

	while (isBalanced(z))
	{
		if (z == root)
			return;

		z = z->parent;
		updateHeight(z);
	}

	if (z->lChild->height > z->rChild->height)
		y = z->lChild;
	else
		y = z->rChild;

	if (y->lChild->height > y->rChild->height)
		x = y->lChild;
	else
		x = y->rChild;

	restructure(x, y, z);
	return;
}

int updateHeight(Node *w)
{

	Node *l = w->lChild;
	Node *r = w->rChild;
	int h = (l->height > r->height ? l->height : r->height) + 1;

	if (h != w->height)
	{
		w->height = h;
		return TRUE;
	}

	return FALSE;
}

int isBalanced(Node *w)
{

	Node *l = w->lChild;
	Node *r = w->rChild;

	int height = l->height - r->height;

	if (height < 0)
		height = -height;

	if (height < 2)
		return TRUE;

	return	FALSE;
}

Node *restructure(Node *x, Node *y, Node *z)
{
	Node *a, *b, *c;
	Node *T[4];

	if (z->key < y->key && y->key < x->key)
	{
		a = z;
		b = y;
		c = x;
		T[0] = a->lChild;
		T[1] = b->lChild;
		T[2] = c->lChild;
		T[3] = c->rChild;
	}
	else if (x->key < y->key && y->key < z->key)
	{
		a = x;
		b = y;
		c = z;
		T[0] = a->lChild;
		T[1] = a->rChild;
		T[2] = b->rChild;
		T[3] = c->rChild;
	}
	else if (z->key < x->key && x->key < y->key)
	{
		a = z;
		b = x;
		c = y;
		T[0] = a->lChild;
		T[1] = b->lChild;
		T[2] = b->rChild;
		T[3] = c->rChild;
	}
	else
	{
		a = y;
		b = x;
		c = z;
		T[0] = a->lChild;
		T[1] = b->lChild;
		T[2] = b->rChild;
		T[3] = c->rChild;
	}

	if (root == z)
	{
		root = b;
		b->parent = NULL;
	}
	else if (z->parent->lChild == z)
	{
		z->parent->lChild = b;
		b->parent = z->parent;
	}
	else
	{
		z->parent->rChild = b;
		b->parent = z->parent;
	}

	a->lChild = T[0];
	T[0]->parent = a;
	a->rChild = T[1];
	T[1]->parent = a;
	updateHeight(a);

	c->lChild = T[2];
	T[2]->parent = c;
	c->rChild = T[3];
	T[3]->parent = c;
	updateHeight(c);

	b->lChild = a;
	a->parent = b;
	b->rChild = c;
	c->parent = b;
	updateHeight(b);

	return b;
}

Node *findSibling(Node *w)
{
	if (w->parent->lChild == w)
		return w->parent->rChild;

	return w->parent->lChild;
}

Node *reduceExternal(Node *z)
{
	Node *w = z->parent;
	Node *zs = findSibling(z);
	Node *g;

	if (w == root)
	{
		root = zs;
		zs->parent = NULL;
	}
	else
	{
		g = w->parent;
		zs->parent = g;
		if (w == g->lChild)
			g->lChild = zs;
		else
			g->rChild = zs;
	}

	free(z);
	free(w);

	return zs;
}

int removeElement(int key)
{
	Node *w = treeSearch(root, key);
	Node *zs, *z, *y;

	if (isExternal(w))
		return FALSE;

	z = w->lChild;

	if (!isExternal(z))
		z = w->rChild;

	if (isExternal(z))
		zs = reduceExternal(z);
	else
	{
		y = inOrderSucc(w);
		z = y->lChild;
		w->key = y->key;
		zs = reduceExternal(z);
	}

	searchAndFixAfterRmoval(zs->parent);
	return key;
}

Node *inOrderSucc(Node *w)
{
	w = w->rChild;
	while (!isExternal(w->lChild))
	{
		w = w->lChild;
	}

	return w;
}

void searchAndFixAfterRmoval(Node *w)
{
	Node *tmp, *x, *y, *z = w;

	if (z == NULL)
		return;

	updateHeight(z);

	while (isBalanced(z))
	{
		if (z == root)
			return;
		z = z->parent;
		updateHeight(z);
	}

	if (isBalanced(z))
		return;

	if (z->lChild->height > z->rChild->height)
		y = z->lChild;
	else
		y = z->rChild;

	if (y->lChild->height > y->rChild->height)
		x = y->lChild;
	else if (y->lChild->height < y->rChild->height)
		x = y->rChild;
	else
	{
		if (z->lChild == y)
			x = y->lChild;
		else
			x = y->rChild;
	}

	tmp = restructure(x, y, z);
	searchAndFixAfterRmoval(tmp->parent);

	return;
}
