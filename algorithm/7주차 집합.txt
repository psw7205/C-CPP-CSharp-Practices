
//헤더 노드가 있는 단일 연결리스트로 구현

#include <stdio.h>
#include <malloc.h>

#pragma warning(disable:4996)


typedef struct _node {
   int elem;
   struct _node *next;
}_node;


_node* getNode(int elem) {
   _node* temp;
   temp = (_node*)malloc(sizeof(_node));
   temp->elem = elem;
   temp->next = NULL;
   return temp;
}


void insertLast(_node *list, int elem) { // 헤더가 있는경우 삽입이 비교적 편하다.
   _node *temp = list;
   while (temp->next != NULL)
      temp = temp->next;
   temp->next = getNode(elem);
}

void printAllnode(_node *list) { // 모든 노드 순회하며 출력
   if (list->next == NULL)  // 공집합 일경우 0 출력
      printf(" 0\n");
   else {
      list = list->next;
      while (list != NULL) {
         printf(" %d", list->elem);
         list = list->next;
      }
      printf("\n");
   }
}


void freeList(_node *list) { // 동적리스트 메모리해제
   _node *temp = list;
   while (temp != NULL) {
      list = temp->next;
      free(temp);
      temp = list;
   }
}

void Union(_node *a, _node *b, _node *c) {
   a = a->next;
   b = b->next; // header 노드 제외.
   while (a != NULL && b != NULL) { // 양쪽 모든 리스트가 비어있지 않은경우
      if (a->elem < b->elem) { // 오름차순으로 리스트 입력을 위해
         insertLast(c, a->elem);
         a = a->next;
      }
      else if(a->elem > b->elem){
         insertLast(c, b->elem);
         b = b->next;
      }
      else {
         insertLast(c, a->elem);
         a = a->next;
         b = b->next;
      }
   }
   while (a != NULL) { //리스트의 나머지를 모두 c집합에 insert
      insertLast(c, a->elem);
      a = a->next;
   }
   while (b != NULL) {
      insertLast(c, b->elem);
      b = b->next;
   }
   return;
}

void Intersect(_node *a, _node *b, _node *c) {
   a = a->next;
   b = b->next;
   while (a != NULL && b != NULL) { // 양쪽리스트중 하나가 NULL이면 종료
      if (a->elem < b->elem)
         a = a->next;
      else if (a->elem > b->elem)
         b = b->next;
      else { // 같을때만 교집합
         insertLast(c, b->elem);
         a = a->next;
         b = b->next;
      }
   }
}


int main() {
   _node *list[4];
   int setsize, elem;
   for (int i = 0; i < 4; i++)
      list[i] = getNode(-1);
   for (int i = 0; i < 2; i++) {
      scanf("%d", &setsize);
      for (int j = 0; j < setsize; j++) {
         scanf("%d", &elem);
         insertLast(list[i], elem);
      }
   }
   Union(list[0], list[1], list[2]);
   Intersect(list[0], list[1], list[3]);
   printAllnode(list[2]);
   printAllnode(list[3]);
   for (int i = 0; i < 4; i++)
      freeList(list[i]);
   return 0;
}


/*

===============================================================================================================
//헤더 노드가 없는 단일 연결리스트로 구현. 노드의 갯수를 count 하지 않는 버전.

#include <stdio.h>
#include <malloc.h>

#pragma warning(disable:4996)


typedef struct _node {
   int elem;
   struct _node *next;
}_node;


_node* getNode(int elem){
   _node* temp;
   temp = (_node*)malloc(sizeof(_node));
   temp->elem = elem;
   temp->next = NULL; // 단일연결리스트는 노드가 NULL인지 아닌지로 마지막 노드 판별
   return temp;
}

void insertLast(_node **header, int elem) { //이중포인터를 이용한 node expand
   _node **temp = header;               // 포인터를 완벽하게 이해하고 있지 않다면, 이해하기는 어렵습니다
   while (*temp != NULL)               // 어렵다면 if문을 이용하여 header ==NULL일때 header에 새로운 노드를 만드는
      temp = &((*temp)->next);         // 예외처리를 하시는 형태로 만드시기 바랍니다.
   *temp = getNode(elem);
}

int boolSubset(_node *a, _node *b) {


   while (a != NULL && b != NULL) {
      if (a->elem < b->elem) // 현재 비교하는 A<B인 경우, 더이상 부분집합일수 없으므로 조기리턴한다. (오름차순이기때문)
         return a->elem;
      if (a->elem == b->elem) // 현재비교하는 A==B인경우 다음 A로 비교할수 있게한다.
         a = a->next;
      b = b->next;       // B는 항상 다음것으로 비교한다.
   }
   if (a == NULL) // 부분집합
      return 0;
   return a->elem; // B == NULL
}

void freeList(_node *list) {
   _node *temp = list;
   while (temp != NULL) {
      list = temp->next;
      free(temp);
      temp = list;
   }
}

int main() {
   int n, elem;
   _node *list[2] = { NULL, NULL };
   for (int i = 0; i < 2; i++) {
      scanf("%d", &n);
      for (int j = 0; j < n; j++) {
         scanf("%d", &elem);
         insertLast(&list[i], elem);
      }
   }
   printf("%d\n", boolSubset(list[0], list[1]));
   freeList(list[0]);
   freeList(list[1]);
   return 0;

}

*/