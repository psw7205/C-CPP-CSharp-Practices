문제 1
#include <stdio.h>
#include <string.h>
#pragma warning (disable:4996)

int main()
{
	char str[101] = { "\0" }; // 문자열을 입력받을 배열입니다.
	char* p; // 자음이 가장 많은 단어를 저장할 문자열입니다.
	char* q; // 모음이 가장 만은 단어를 저장할 문자열입니다.
	int i, cnt = 0, conCnt = 0, vowCnt = 0, conIdx = 0, vowIdx = 0, conLen = 0, vowLen = 0, conMax = 0, vowMax = 0;
	// 반복문에서 사용할 i, 단어의 길이를 세는 cnt, 단어의 시작 인덱스를 저장할 idx, 단어의 길이를 저장힐 Len, 가장 많은 자음, 모음 갯수를 셀 Max입니다.
	// con은 자음, vow는 모음입니다.

	gets(str); // 문자열을 입력받습니다.

	for (i = 0; i <= strlen(str); i++) // 마지막 단어의 처리를 한번에 하기위해 '\0'까지 이동합니다.
	{
		if (str[i] != ' ' && str[i] != '\0') // " " 공백이거나 NULL문자가 아니면 단어입니다.
		{
			if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u')
				vowCnt++; // 모음이면 모음을 세고
			else
				conCnt++; // 아니면 자음을 셉니다. 문자열은 소문자만 입력됩니다.

			cnt++; // 총 단어의 갯수를 셉니다.
		}
		else // 한단어가 끝나면 
		{
			if (conMax < conCnt) // 자음의 갯수를 확인하고 
			{
				conMax = conCnt; // 최댓값
				conIdx = i - cnt; // 그 단어의 시작 idx
				conLen = cnt; // 그 단어의 길이를 저장합니다.
			}

			if (vowMax < vowCnt) // 모음도 같은 방법으로 저장합니다. 
			{
				vowMax = vowCnt;
				vowIdx = i - cnt;
				vowLen = cnt;
			}

			cnt = conCnt = vowCnt = 0; // cnt변수들은 다음 단어에서 사용해야하므로 0으로 저장합니다.
		}
	}

	
	if (conMax != 0) // 1개라도 있으면 
	{
		p = str + conIdx; // 시작인덱스에서 위에서 찾은 자음이 최대로 있는 단어의 시작 인덱스를 더해 단어의 시작 주소를 p에 저장합니다.
		*(p + conLen) = '\0'; // 단어의 끝을 나타내기위해 맨 마지막에 NULL문자를 저장합니다.
		printf("%s %d\n", p, conMax); // 문자열과 자음의 최대 갯수를 출력합니다.
	}
	else
	{
		printf("%d\n", conMax); // 자음이 한개도 없으면 0만 출력합니다.
	}

	// 자음과 같은 방법으로 모음도 출력합니다.
	if (vowMax != 0)
	{
		q = str + vowIdx;
		*(q + vowLen) = '\0';
		printf("%s %d\n", q, vowMax);
	}
	else
	{
		printf("%d\n", vowMax);
	}

	return 0;
}
===============================================================================================================
문제 2
#include <stdio.h>
#include <string.h>
#pragma warning (disable:4996)

int main()
{
	char str[14] = { '\0' }; // 연산 단어 3개, 숫자 최대 8자리, 공백 2개 -> 총 14개의 배열이 필요합니다. 
	char* tmp[4] = { "add", "sub", "mul", "div" }; // 연산단어들입니다.
	char* p[3]; // 연산단어, 숫자 2개를 가르킬 포인터 배열입니다.
	int sum, i, j = 1, len; // 계산값을 저장할 sum, 반복문에서 사용할 i,j, 최초 문자열 길이를 저장할 len입니다.

	gets(str); // 문자열을 입력받고

	len = strlen(str); // 문자열의 길이와
	p[0] = str; // 첫 단어 위치를 p[0]로 가르키게 합니다.

	for (i = 0; i < len; i++) // 문자열을 처음부터 끝까지 이동하면서
	{
		if (str[i] == ' ') // 공백이 나오면
		{
			str[i] = '\0'; // NULL문자로 바꾸고 
			p[j] = str + i + 1; // 그 다음 주소를 p[1], p[2]로 가르키게 합니다. 이 두 값이 입력된 숫자들입니다.
			j++;
		}
	}

	//p[0]는 연산이름을, p[1], p[2]는 정수 두개를 가르키게됩니다.
	//strcmp()는 같으면 0을 리턴합니다. 따라서 앞이 not연산자 사용해 같을 경우 조건을 실행시킵니다.
	//atoi()는 문자열을 정수로 바꿔 리턴합니다.

	if (!strcmp(p[0], tmp[0])) // 연산이름과 "add"가 같으면 
		sum = atoi(p[1]) + atoi(p[2]); // 두 정수를 더해 sum에 저장합니다.

	if (!strcmp(p[0], tmp[1])) // 연산이름과 "sub"이 같으면 
		sum = atoi(p[1]) - atoi(p[2]); // 두 정수를 빼 sum에 저장합니다.

	if (!strcmp(p[0], tmp[2])) // 연산이름과 "mul"이 같으면 
		sum = atoi(p[1]) * atoi(p[2]); // 두 정수를 곱해 sum에 저장합니다.

	if (!strcmp(p[0], tmp[3])) // 연산이름과 "div"가 같으면 
		sum = atoi(p[1]) / atoi(p[2]); // 두 정수를 나누어 sum에 저장합니다.

	printf("%d", sum); // sum을 출력합니다.

	return 0;
}
===============================================================================================================
문제 3
#include <stdio.h>
#include <string.h>
#pragma warning (disable:4996)

void del(char* str)
{
	int i = 0, j = 0; // 반복문에서 사용할 i, j입니다.

	while(str[i] != '\0') // 널문자가 나오기 전까지 계속 반복합니다.
	{
		if (str[i] == ' ') // 공백이 나오면
		{
			j = i; // 공백위치부터
			while (str[j] != '\0') // 끝까지
			{
				str[j] = str[j + 1]; // 앞으로 한 칸씩 이동시킵니다.
				j++;
			}
			i--; // 공백위치에 그 다음 문자가 저장되었으므로 i를 1 줄여 그 문자부터 다시 검사하게 합니다.
		}
		i++;
	}

	return;
}

int main()
{
	char str[1000]; // 문제에 문자열 길이가 안나와 있어 임의로 1000개까지 잡았습니다

	gets(str); // 문자열을 입력받고

	del(str); // 공백을 삭제하고

	printf("%s", str); // 문자열을 출력합니다.

	return 0;
}
===============================================================================================================
문제 4-1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#pragma warning (disable:4996)

int main()
{
	char str[101]; // 100자리 문자열까지 입력받을 문자열입니다.
	char* p[10]; // 각 숫자를 가르킬 포인터 배열입니다.
	int i, j = 0, flag = 0, len; // 반복문에서 i, j, 한 숫자에 한 개의 포인터만 가르키게 하기 위한 flag, 문자열 길이를 저장하는 len입니다.

	gets(str); // 문자열을 입력받고

	len = strlen(str); // 길이를 저장합니다.

	for (i = 0; i < len; i++) // 문자열 전체를 이동합니다.
	{
		if ((str[i] >= '0' && str[i] <= '9') && flag == 0) //숫자이면서 flag가 0이면 처음 나오는 숫자입니다.
		{
			p[j] = str + i; // 포인터로 그 위치를 가르키게 하고
			flag = 1; // flag를 1로 체크해 맨 앞의 위치한 숫자가 아님을 확인합니다.
			j++;
		}
		else if ((str[i] >= '0' && str[i] <= '9') && flag == 1)
		{
			continue; // 숫자이긴 하지만 flag가 1이라면 그냥 넘어갑니다.
		}
		else // 숫자가 아니면
		{
			str[i] = '\0'; // 널문자로 바꾸고
			flag = 0; // flag를 0으로 바꾸어 다음에 나올 숫자를 가르킬 수 있게 합니다.
		}
	}

	for (i = 0; i < j; i++)
	{
		printf(" %.0lf", atof(p[i])); // atof 합수를 이용해 double형을 변환 후 출력합니다.
	}

	return 0;
}
===============================================================================================================
문제 4-2
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#pragma warning (disable:4996)

int main()
{
	char str[101]; // 100자리 문자열까지 입력받을 문자열입니다.
	char* p[20]; // 각 숫자와  가르킬 포인터 배열입니다.
	int i, j = 0, flag = 0, len; // 반복문에서 i, j, 한 숫자에 한 개의 포인터만 가르키게 하기 위한 flag, 문자열 길이를 저장하는 len입니다.

	gets(str); // 문자열을 입력받고

	len = strlen(str); // 길이를 저장합니다.

	for (i = 0; i < len; i++) // 문자열 전체를 이동합니다.
	{
		if ((str[i] >= '0' && str[i] <= '9') && flag == 0) //숫자이면서 flag가 0이면 처음 나오는 숫자입니다.
		{
			p[j] = str + i; // 포인터로 그 위치를 가르키게 하고
			flag = 1; // flag를 1로 체크해 맨 앞의 위치한 숫자가 아님을 확인합니다.
			j++; // 다음 포인터 배열로 이동시킵니다.
		}
		else if ((str[i] >= '0' && str[i] <= '9') && flag == 1)
		{
			continue; // 숫자이긴 하지만 flag가 1이라면 그냥 넘어갑니다.
		}
		else // 숫자가 아닐 떄
		{
			if (str[i] == '-') // '-' 기호가 나오면
			{
				p[j] = str + i; // 포인터로 그 위치를 가르키게 하고
				flag = 1; // flag를 1로 체크해 맨 앞의 위치한 숫자가 아님을 확인합니다.
				j++; // 다음 포인터 배열로 이동시킵니다.
				if (*(str + i + 1) == ' ') // 만약 그 다음이 공백이라면
					strcpy(str + i + 1, str + i + 2); // 공백을 지웁니다.
			}
			else
			{
				str[i] = '\0'; // 널문자로 바꾸고
				flag = 0; // flag를 0으로 바꾸어 다음에 나올 숫자를 가르킬 수 있게 합니다.
			}
		}
	}

	for (i = 0; i < j; i++)
	{
		printf(" %.0lf", atof(p[i])); // atof 함수를 이용해 double형을 변환 후 출력합니다.
	}

	return 0;
}
===============================================================================================================
문제 4-3
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#pragma warning (disable:4996)

int main()
{
	char str[101] = { '\0' };; // 100자리 문자열까지 입력받을 문자열입니다.
	char tmp[20] = { '\0' }; // 숫자 외 모든 문자를 저장할 배열입니다.
	char* p[10]; // 각 숫자를 가르킬 포인터 배열입니다.
	
	int i, j = 0, k = 0, flag = 0, len; // 반복문에서 i, j, k, 한 숫자에 한 개의 포인터만 가르키게 하기 위한 flag, 문자열 길이를 저장하는 len입니다.
	int cnt = 0; // 몇 번째 연산인지 세는 변수입니다.
	double num[10] = { 0.0 }; // 숫자들을 저장할 배열입니다. 

	gets(str); // 문자열을 입력받고

	len = strlen(str); // 길이를 저장합니다.

	for (i = 0; i < len; i++) // 문자열 전체를 이동합니다.
	{
		if ((str[i] >= '0' && str[i] <= '9') && flag == 0) //숫자이면서 flag가 0이면 처음 나오는 숫자입니다.
		{
			p[j] = str + i; // 포인터로 그 위치를 가르키게 하고
			flag = 1; // flag를 1로 체크해 맨 앞의 위치한 숫자가 아님을 확인합니다.
			j++;
		}
		else if ((str[i] >= '0' && str[i] <= '9') && flag == 1)
		{
			continue; // 숫자이긴 하지만 flag가 1이라면 그냥 넘어갑니다.
		}
		else // 숫자가 아닐 떄
		{
			tmp[k] = str[i]; // 공백이던 연산자던 일단 저장합니다.
			k++;
			str[i] = '\0'; // 널문자로 바꾸고
			flag = 0; // flag를 0으로 바꾸어 다음에 나올 숫자를 가르킬 수 있게 합니다.
		}
	}

	// j는 숫자의 개수입니다.
	for (i = 0; i < j; i++) 
	{
		num[i] = atof(p[i]); // 포인터배열에 저장된 숫자들을 double형 배열에 저장합니다.
	}

	//곱셈과 나눗셈의 우선순위 때문에 둘 먼저 계산합니다.
	i = 0;
	while (tmp[i]) // 숫자외 문자들을 저장한 배열을 확인합니다.
	{
		switch (tmp[i])
		{
		case '*': // 저장된 문자가 '*'이라면
			
			num[cnt] *= num[cnt+1]; // 두 수를 곱해 앞에 저장합니다.
			
			for (k = cnt + 1; k < j - 1; k++) // 결과가 앞에 저장되었으므로
			{
				num[k] = num[k + 1]; // 그 뒤 배열은 전부 한칸씩 땡깁니다.
			}

			num[k] = 0.0; // 마지막 저장된 숫자를 0으로 바꿉니다.
			tmp[i] = ' '; // 곱셈을 했으므로 연산자를 공백으로 바꿉니다.
			break;
		
		case '/': // 저장된 문자가 '/'이라면
			num[cnt] /= num[cnt + 1]; // 두 수를 나누어 앞에 저장합니다.

			for (k = cnt + 1; k < j - 1; k++)
			{
				num[k] = num[k + 1];
			}

			num[k] = 0.0;
			tmp[i] = ' ';
			break;

		default:
			if (tmp[i] != ' ') // 공백이 아니라면 연산자입니다.
				cnt++; // 연산자 순서를 증가시고
			break;
		}
		i++; // 다음으로 넘어갑니다.
	}

	// 덧셈과 뺄셈을 계산합니다. 곱셈에서 한 방법과 같습니다.
	i = 0;
	cnt = 0;
	while (tmp[i])
	{
		switch (tmp[i])
		{
		case '+': // 저장된 문자가 '+'이라면

			num[cnt] += num[cnt + 1]; // 두 수를 더해 앞에 저장합니다.

			for (k = cnt + 1; k < j - 1; k++)
			{
				num[k] = num[k + 1];
			}

			num[k] = 0.0;
			break;

		case '-': // 저장된 문자가 '-'이라면
			num[cnt] -= num[cnt + 1]; // 두 수를 빼 앞에 저장합니다.

			for (k = cnt + 1; k < j - 1; k++)
			{
				num[k] = num[k + 1];
			}

			num[k] = 0.0;
			break;

		default:
			if (tmp[i] != ' ')
				cnt++;
			break;
		}
		i++;
	}

	// 연산이 실행 될 때마다 결과를 앞에 저장하고 한 칸 씩 땡겼습니다.
	// 모든 연산이 끝나면 맨 앞에 계산 결과가 저장됩니다.
	printf("%lf", num[0]); // 계산 결과를 출력합니다.

	return 0;
}
===============================================================================================================
문제 5-1
#include <stdio.h>
#include <string.h>
#pragma warning (disable:4996)

int main()
{
	char M[1001]; // 입력받을 문자열입니다.
	char* N[100]; // 각 단어들을 지정할 포인터 배열입니다.
	char* tmp;
	int K, i = 0, j = 0, cnt = 0, len, flag = 0; // 출력할 위치를 저장할 K, 반복문에서 사용할 i, j, 단어의 갯수를 세는 cnt, 길이를 저장하는 len, 플래그 변수입니다.

	gets(M); // 문자열과 
	scanf("%d", &K); // K를 입력받습니다.

	len = strlen(M); // 문자열 길이를 저장합니다.

	for (i = 0; i < len; i++) // 문자열을 확인합니다.
	{
		if (flag == 0) // flag가 0이면 이전에 공백이 나왔단 뜻이고 새로 포인터를 지정합니다.
		{
			N[cnt] = M + i; // 문자열 포인터에 시작 위치를 지정합니다.
			flag = 1; // 단어가 시작됨을 알리기 위해 1로 바꿉니다.
			cnt++; 
		}

		if (M[i] == ' ') // 공백이 나오면 한단어가 끝났단 뜻이므로
		{
			M[i] = '\0'; // 널문자로 바꾸고
			flag = 0; // flag를 0으로 바꾸어 새 단어가 저장될 수 있게 합니다.
		}
	}

	for (i = 0; i < cnt - 1; i++) // 버블정렬을 이용해
	{
		for (j = 0; j < cnt - 1 - i; j++)
		{
			if (strlen(N[j]) < strlen(N[j + 1])) // 길이가 긴 순서대로 정렬합니다.
			{
				tmp = N[j];
				N[j] = N[j + 1];
				N[j + 1] = tmp;
			}

			// 다만 길이가 같을 경우 사전순으로 정렬합니다.
			if (strlen(N[j]) == strlen(N[j + 1]) && strcmp(N[j], N[j + 1]) > 0)
			{
				tmp = N[j];
				N[j] = N[j + 1];
				N[j + 1] = tmp;
			}
		}
	}
	// 정렬이 끝나면
	printf("%s", N[K - 1]); // K번째 위치를 출력합니다.

	return 0;
}
===============================================================================================================
문제 5-2
#include <stdio.h>
#include <string.h>
#pragma warning (disable:4996)

void BubbleSort(char* str, int size) // 버블정렬입니다. 단어를 알파벳 순으로 정렬해 비슷한 단어를 체크하기 쉽도록 합니다.
{
	int i, j;
	char tmp;

	for (i = 0; i < size - 1; i++)
	{
		for (j = 0; j < size - 1 - i; j++)
		{
			if (str[j] > str[j + 1])
			{
				tmp = str[j];
				str[j] = str[j + 1];
				str[j + 1] = tmp;
			}
		}
	}
}

int main()
{
	char M[1001]; // 입력받을 문자열입니다.
	char* N[100]; // 각 단어들을 지정할 포인터 배열입니다.
	char* tmp; // 포인터 교환시 사용할 임시변수입니다.
	char firstWord[100]; // 선택한 단어를 저장할 배열입니다.
	char tempWord[100]; // 비슷한 단어를 찾을 때 
	int K, i = 0, j = 0, k = 0, wordIdx = 0, len = 0, cnt = 0; // 출력할 위치를 저장할 K, 반복문에서 사용할 i, j, k, 단어의 갯수를 세는 wordIdx, 길이를 저장하는 len, 플래그 변수입니다.

	gets(M); // 문자열과 
	scanf("%d", &K); // K를 입력받습니다.

	len = strlen(M); // 문자열 길이를 저장합니다.

	for (i = 0; i < len; i++) // 문자열을 확인합니다.
	{
		if (cnt == 0) // cnt가 0이면 이전에 공백이 나왔단 뜻이고 새로 포인터를 지정합니다.
		{
			N[wordIdx] = M + i; // 문자열 포인터에 시작 위치를 지정합니다.
			cnt = 1; // 단어가 시작됨을 알리기 위해 1로 바꿉니다.
			wordIdx++;
		}

		if (M[i] == ' ') // 공백이 나오면 한단어가 끝났단 뜻이므로
		{
			M[i] = '\0'; // 널문자로 바꾸고
			cnt = 0; // cnt를 0으로 바꾸어 새 단어가 저장될 수 있게 합니다.
		}
	}

	for (i = 0; i < wordIdx - 1; i++) // 버블정렬을 이용해
	{
		for (j = 0; j < wordIdx - 1 - i; j++)
		{
			if (strlen(N[j]) < strlen(N[j + 1])) // 길이가 긴 순서대로 정렬합니다.
			{
				tmp = N[j];
				N[j] = N[j + 1];
				N[j + 1] = tmp;
			}

			// 다만 길이가 같을 경우 사전순으로 정렬합니다.
			if (strlen(N[j]) == strlen(N[j + 1]) && strcmp(N[j], N[j + 1]) > 0)
			{
				tmp = N[j];
				N[j] = N[j + 1];
				N[j + 1] = tmp;
			}
		}
	}
	// 정렬이 끝나면
	strcpy(firstWord, N[K - 1]); // K번째 위치단어를 firstWord에 복사합니다.

	printf("%s\n", firstWord); // 단어를 출력합니다.

	BubbleSort(firstWord, strlen(firstWord)); // 단어를 알파벳순으로 정렬합니다.

	for (i = 0; i < wordIdx; i++) // 단어들을 저장한 포인터 배열을 확인합니다.
	{
		if (i == K - 1) // K - 1번째 단어는 이미 선택한 단어고 위에서 출력했으므로 건너뜁니다.
			continue;

		strcpy(tempWord, N[i]); // 현재 단어를 tempWord에 복사하고
		BubbleSort(tempWord, strlen(tempWord)); // 알파벳순으로 정렬합니다.

		j = 0; // j, k 는 두 단어의 알파벳을 확인 할 때 사용합니다. 
		k = 0;
		cnt = 0; // cnt는 중복된 알파벳의 갯수를 셉니다.

		while (firstWord[j] != '\0' && tempWord[k] != '\0') // 두 단어중 한 단어라도 끝나면 반복문을 탈출합니다.
		{
			if (firstWord[j] == tempWord[k]) // 두 단어의 알파벳이 같으면
			{
				j++;
				k++; // 두 단어 모두 다음 알파벳으로 넘어가고
				cnt++; // 중복된 알파벳 갯수를 증가시킵니다.
			}
			else if (firstWord[j] > tempWord[k]) // 우리가 선택한 단어의 알파벳이 크다면
				k++; // tempWord의 다음 알파벳으로 이동합니다.
			else // 마지막  tempWord의 알파벳이 큰 경우에는
				j++; // 선택한 단어의 다음 알파벳으로 이동합니다.
		} 
		// 위 과정에서 두 단어중 짧은 단어를 기준으로 중복된 알파벳의 갯수가 cnt에 저장됩니다.

		// 이제 두 단어중 긴 단어에서 중복된 알파벳 개수를 빼 중복되지 않은 알파벳 개수를 셉니다.
		// 중복되지 않은 알파벳의 갯수인 len이 0이면 두 단어의 알파벳 구성은 같은 것이고 1이면 1개의 단어만 수정해 같은 구성을 만족시킬 수 있습니다.
		// len이 2 이상이라면 한 알파벳만 수정해 같은 구성을 만들 수 없으므로 둘은 비슷한 단어가 아닙니다.
		if (firstWord[j] == '\0')
			len = strlen(tempWord) - cnt; 
		else
			len = strlen(firstWord) - cnt;

		// 중복된 알파벳 갯수가 선택한 단어의 갯수보다 1작거나 크고, 중복되지 않은 알파벳 갯수가 2보다 작으면 문제에서 말한 "비슷한 단어"입니다.
		if (cnt >= strlen(firstWord) - 1 && cnt <= strlen(firstWord) + 1 && len < 2)
			printf("%s\n", N[i]); // 현재 확인 중인 단어를 출력합니다.
	}

	return 0;
}