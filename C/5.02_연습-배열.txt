최대 최소 찾기
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	double a[5] = { 0.0 };
	double max = 0, min = 0;
	int idx[2];

	for (int i = 0; i < 5; i++)
		scanf("%lf", &a[i]);

	max = a[0];
	min = a[0];

	for (int i = 1; i < 5; i++)
	{
		if (max < a[i])
		{
			max = a[i];
			idx[0] = i;
		}
		if (min > a[i])
		{
			min = a[i];
			idx[1] = i;
		}		
	}

	printf("%lf %d\n%lf %d", max, idx[0], min, idx[1]);

	return 0;
}
============================================================================
버블정렬 1
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int i, j, tmp;
	int list[10] = { 0 };

	for (i = 0; i < 10; i++)
		scanf("%d", &list[i]);

	for (i = 0; i < 9; i++) // 중요!! i < n -1
	{
		for (j = 0; j < 9 - i; j++) // 중요!! j < n -1 - i 
		{
			if (list[j] > list[j + 1]) // 오름차순 정렬 -> 큰 걸 뒤로 밈 
			{
				tmp = list[j+1];
				list[j+1] = list[j];
				list[j] = tmp;
			}
		}
	}

	for(i = 0; i < 10; i ++)
		printf(" %d", list[i]);

	return 0;
}
============================================================================
버블정렬 2
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int i, j, tmp;
	int list[5] = { 0 };

	for (i = 0; i < 5; i++)
		scanf("%d", &list[i]);

	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4 - i; j++)
		{
			if (list[j] < list[j + 1]) // 내림차순 -> 작은걸 뒤로 밈
			{
				tmp = list[j+1];
				list[j+1] = list[j];
				list[j] = tmp;
			}
		}
	}

	printf(" %d %d", list[0], list[1]);

	return 0;
}

============================================================================
중복제거 1
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int i, j;
	int n[10] = { 0 };

	for (i = 0; i < 10; i++)
		scanf("%d", &n[i]);

	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (n[i] == n[j]) // 중복이면 탈출
				break;
		}
		if (i == j) // j가 중간에 탈출 하지 않는 다면 중복이 없는 것
			printf(" %d", n[i]);
	}

	return 0;
}

============================================================================
중복제거 - 배열 재설정
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int i, j, k;
	int n[10] = { 0 };
	int cnt = 0;

	for (i = 0; i < 10; i++)
		scanf("%d", &n[i]);

	for (i = 0; i < 10-cnt; i++)
	{
		j = i + 1;
		while (j < 10-cnt)
		{
			if (n[i] == n[j]) // 중복이면
			{
				for (k = j; k < 10 - cnt; k++) // 한칸씩 떙김
				{
					n[k] = n[k + 1];
					cnt++;
				}
			}
			else
				j++;
		}
	}

	for (i = 0; i < 10-cnt; i++)
		printf(" %d", n[i]);

	return 0;
}


