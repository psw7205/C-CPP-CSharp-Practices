문제 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#pragma warning(disable:4996)

int main()
{
	char *a = NULL , *b = NULL; // 두 문자열을 동적할당할 포인터
	char tmp[51]; // 문자열을 입력받을 배열

	gets(tmp);
	a = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 문자열의 크기 + 1 만큼 동적할당
	
	if (a == NULL) // a가 NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return -1;
	}

	strcpy(a, tmp); // a로 tmp문자열 복사

	gets(tmp);
	b = (char*)malloc(sizeof(char)*(strlen(tmp) + 1));
	strcpy(b, tmp);

	if (!strcmp(a, b)) // a, b 문자열이 같으면
		printf("identical"); // identical출력
	else // 다르면
		printf("different"); // different 출력

	if(a != NULL)
		free(a); // 메모리 해제
	if(b != NULL)
		free(b);

	return 0;
}
===============================================================================================
문제 2
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#pragma warning(disable:4996)

struct st {
	char *str; // 문자열 저장
	int cnt; // 자음 수 저장
};

typedef struct st ST; // ST로 재정의

int main()
{
	ST *ar = NULL; // 동적할당받을 구조체 포인터
	ST swap; // 교환시 사용할 구조체
	int n, i, j, cnt = 0; // 문자열갯수, 반복문에서 사용할 i,j, 자음의 갯수를 셀 cnt
	char tmp[101]; // 문자열을 임시저장할 변수

	scanf("%d", &n); // 문자열 갯수

	ar = (ST*)malloc(sizeof(ST)*n); // 갯수만큼 동적할당

	if (ar == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return -1;
	}

	for (i = 0; i < n; i++)
	{
		scanf("%s", tmp); // 문자열을 입력받고
		ar[i].str = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 문자열 크기 + 1 만큼 동적할당
		
		if (ar[i].str == NULL) // NULL이면 메모리 할당 실패
		{
			printf("Not enough memory!"); // 에러표시
			return -1;
		}

		strcpy(ar[i].str, tmp); // 문자열 복사

		for (j = 0; j < strlen(ar[i].str); j++) // 문자열에서
		{
			if (ar[i].str[j] != 'a' && ar[i].str[j] != 'e'&& ar[i].str[j] != 'i'&& ar[i].str[j] != 'o'&& ar[i].str[j] != 'u'
				&& ar[i].str[j] != 'A' && ar[i].str[j] != 'E'&& ar[i].str[j] != 'I'&& ar[i].str[j] != 'O'&& ar[i].str[j] != 'U')
				// 모음이 아닐 때(자음일 때)
				cnt++; // cnt갯수 증가
		}

		ar[i].cnt = cnt; // cnt를 구조체 변수 cnt에 저장
		cnt = 0; // cnt초기화
	}

	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (ar[j].cnt < ar[j + 1].cnt) // cnt(자음의 갯수)를 기준으로 내림차순 정렬
			{
				swap = ar[j];
				ar[j] = ar[j + 1];
				ar[j + 1] = swap;
			}
		}
	}

	for (i = 0; i < n; i++)
		printf("%s\n", ar[i].str); // 문자열 출력

	for (i = 0; i < n; i++)
	{
		if(ar[i].str != NULL)
			free(ar[i].str); // 구조체 속 동적할당 받은 문자열 해제
	}
	if(ar != NULL)
		free(ar); // 동적할당 해제

	return 0;
}
===============================================================================================
문제 3
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable:4996)

int main()
{
	int n, m, i, j; // 행, 열, 이터레이터
	int **ar = NULL; // 2차원배열을 동적할당받을 이중포인터
	int ave = 0; // 평균

	scanf("%d %d", &n, &m); // 행, 열을 입력

	ar = (int**)malloc(sizeof(int*)*n); // 행만큼 int* 동적할당
	
	if (ar == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return -1;
	}

	for (i = 0; i < n; i++)
	{
		ar[i] = (int*)malloc(sizeof(int)*m); // 각 행에 동적할당
		
		if (ar[i] == NULL) // NULL이면 메모리 할당 실패
		{
			printf("Not enough memory!"); // 에러표시
			return -1;
		}

	}


	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
		{
			scanf("%d", &ar[i][j]); // 2차원 배열을 입력받음
		}
	}

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
		{
			ave += ar[i][j]; // 모든 배열의 값을 덧셈
		}
	}

	ave /= (n * m); // 배열의 크기로 나누어 평균계산(문제에서 정수계산 표시)

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
		{
			if (ave > ar[i][j]) // 평균보다 작으면
				printf("0 "); // 0 출력;
			else
				printf("%d ", ar[i][j]); // 2차원 배열 출력
		}
		printf("\n");
	}

	for (i = 0; i < n; i++)
	{
		if(ar[i] != NULL)
			free(ar[i]); // 동적할당 해제
	}
	
	if(ar != NULL)
		free(ar);

	return 0;
}
===============================================================================================
문제 4-1
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable:4996)

int main()
{
	int *veca, *vecb; // vec a, b
	int n, i;

	scanf("%d", &n); // 갯수 입력

	veca = (int*)malloc(sizeof(int)*n);
	
	if (veca == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return -1;
	}

	vecb = (int*)malloc(sizeof(int)*n); // 동적할당

	if (vecb == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return -1;
	}

	for (i = 0; i < n; i++)
		scanf("%d", &veca[i]); // a를 입력받고

	for (i = 0; i < n; i++)
		scanf("%d", &vecb[i]); // b를 입력받음

	for (i = 0; i < n; i++)
		printf("%d ", veca[i] * vecb[i]); // 두 벡터를 곱한 값을 출력

	if(veca != NULL)
		free(veca);
	
	if(vecb != NULL)
		free(vecb); // 동적할당 해제

	return 0;
}
===============================================================================================
문제 4-2
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable:4996)

int** getMatrix(int n)
{
	int **ar;
	int i;

	ar = (int**)malloc(sizeof(int*)*n); // 행 갯수 동적할당
	if (ar == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return -1;
	}

	for (i = 0; i < n; i++)
	{
		ar[i] = (int*)malloc(sizeof(int)*n); // 각 행 동적할당

		if (ar[i] == NULL) // NULL이면 메모리 할당 실패
		{
			printf("Not enough memory!"); // 에러표시
			return -1;
		}
	}

	return ar; // 행렬을 반환
}

void setMatrix(int **ar, int n) // 행렬값을 입력받는 함수
{
	int i, j;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
			scanf("%d", &ar[i][j]); // 행렬값 입력
	}

	return;
}

void freeMatrix(int **ar, int n) // 할당해제 함수
{
	int i;

	for (i = 0; i < n; i++)
	{
		if (ar[i] != NULL)
			free(ar[i]); // 행렬 할당해제
	}

	if (ar != NULL)
		free(ar);

	return;
}

int** mulMatrix(int **a, int **b, int n) // 행렬 곱 함수
{
	int **ar;
	int i, j, k;

	ar = getMatrix(n); // 새로 결과를 저장할 행렬 동적할당
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
			ar[i][j] = 0; // 모든 행렬의 값을 0으로 초기화
	}

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			for (k = 0; k < n; k++)
				ar[i][j] += (a[i][k] * b[k][j]);
		}	// 행렬 곱 계산, 앞 행렬의 행벡터와 뒤 행렬의 열 벡터의 내적

	}

	return ar; // 계산값이 저장된 행렬 반환
}

void printMatrix(int **ar, int n)
{
	int i, j;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
			printf("%d ", ar[i][j]); // 행렬 전체를 반복하며 출력
		printf("\n");
	}

	return;
}

int main()
{
	int **a = NULL, **b = NULL; // matrix a, b
	int **result = NULL; // 결과를 저장할 matrix
	int n;

	scanf("%d", &n); // 갯수 입력

	a = getMatrix(n);
	b = getMatrix(n); // 동적할당

	setMatrix(a, n);
	setMatrix(b, n); // 행렬 입력

	result = mulMatrix(a, b, n); // 행렬 곱 계산, 반환된 행렬을 result로 가르킴

	printMatrix(result, n); // 결과 출력

	freeMatrix(a, n);
	freeMatrix(b, n);
	freeMatrix(result, n); // 할당 해제

	return 0;
}
===============================================================================================
문제 4-3
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable:4996)

int** getMatrix(int n)
{
	int **ar;
	int i;

	ar = (int**)malloc(sizeof(int*)*n); // 행 갯수 동적할당
	if (ar == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return -1;
	}

	for (i = 0; i < n; i++)
	{
		ar[i] = (int*)malloc(sizeof(int)*n); // 각 행 동적할당

		if (ar[i] == NULL) // NULL이면 메모리 할당 실패
		{
			printf("Not enough memory!"); // 에러표시
			return -1;
		}
	}

	return ar; // 행렬을 반환
}

void setMatrix(int **ar, int n) // 행렬값을 입력받는 함수
{
	int i, j;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
			scanf("%d", &ar[i][j]); // 행렬값 입력
	}

	return;
}

void freeMatrix(int **ar, int n) // 할당해제 함수
{
	int i;

	for (i = 0; i < n; i++)
	{
		if (ar[i] != NULL)
			free(ar[i]); // 행렬 할당해제
	}

	if (ar != NULL)
		free(ar);

	return;
}

int** mulMatrix(int **a, int **b, int n) // 행렬 곱 함수
{
	int **ar;
	int i, j, k;

	ar = getMatrix(n); // 새로 결과를 저장할 행렬 동적할당
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
			ar[i][j] = 0; // 모든 행렬의 값을 0으로 초기화
	}

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			for (k = 0; k < n; k++)
				ar[i][j] += (a[i][k] * b[k][j]);
		}	// 행렬 곱 계산, 앞 행렬의 행벡터와 뒤 행렬의 열 벡터의 내적

	}

	return ar; // 계산값이 저장된 행렬 반환
}

void printMatrix(int **ar, int n) // 행렬의 대각선과 차이 출력
{
	int i, a = 0, b = 0;

	for (i = 0; i < n; i++)
	{
		printf("%d ", ar[i][i]); // 좌-우 대각선 출력
		a += ar[i][i]; // 대각선 합 계산
	}
	printf("\n");

	for (i = 0; i < n; i++)
	{
		printf("%d ", ar[i][n - i - 1]); // 우-좌 대각선 출력
		b += ar[i][n - i - 1]; // 대각선 합 계산
	}
	printf("\n");

	a -= b; // 대각선 요소 합의 차

	if (a < 0) // 음수의 경우
		a = -a; // -를 붙여 양수로 바꿈

	printf("%d", a); // 출력
	return;
}

int main()
{
	int **a = NULL, **b = NULL; // matrix a, b
	int **result = NULL; // 결과를 저장할 matrix
	int n;

	scanf("%d", &n); // 갯수 입력

	a = getMatrix(n);
	b = getMatrix(n); // 동적할당

	setMatrix(a, n);
	setMatrix(b, n); // 행렬 입력

	result = mulMatrix(a, b, n); // 행렬 곱 계산, 반환된 행렬을 result로 가르킴

	printMatrix(result, n); // 결과 출력

	freeMatrix(a, n);
	freeMatrix(b, n);
	freeMatrix(result, n); // 할당 해제

	return 0;
}
===============================================================================================
문제 5-1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning (disable:4996)

struct customer {
	char id[5];
	char *name;
	char *phone;
}; // 고객 구조체

int main()
{
	int n, i;
	char tmp[14]; // 이름, 전화번호를 입력받을 문자열
	struct customer *ar; // 구조체 동적할당을 위한 포인터

	scanf("%d", &n);

	ar = (struct customer*)malloc(sizeof(struct customer)*n); // 동적할당

	for (i = 0; i < n; i++)
	{
		scanf("%s", tmp); // 이름을 입력받고
		ar[i].name = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 이름크기 만큼 동적할당
		strcpy(ar[i].name, tmp); // 이름을 복사

		scanf("%s", tmp); // 전화번호 입력
		ar[i].phone = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 전화번호크기 만큼 동적할당
		strcpy(ar[i].phone, tmp); // 전화번호 복사

		strcpy(ar[i].id, tmp + 9); // 전화번호 9번째 자리 ~ == id 복사
	}

	scanf("%s", tmp); // 찾을 id입력

	for (i = 0; i < n; i++)
	{
		if (!strcmp(ar[i].id, tmp)) // id를 찾으면
		{
			printf("%s %s %d", ar[i].name, ar[i].phone, i + 1); // 이름, 전화번호, 순서 출력
			break;
		}
	}

	for (i = 0; i < n; i++)
	{
		free(ar[i].name); // 구조체 속 동적할당 해제
		free(ar[i].phone);
	}
	free(ar); // 동적할당 해제

	return 0;
}
===============================================================================================
문제 5-2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning (disable:4996)
//#define _CRTDBG_MAP_ALLOC #include <stdlib.h> #include <crtdbg.h>  
// 메모리 누수 확인 : https://msdn.microsoft.com/ko-kr/library/x98tx3cf.aspx


struct customer {
	char id[5];
	char *name;
	char *phone;
	struct customer *next;
}; // 고객 구조체

struct customer* getNode()
{
	struct customer *newNode = (struct customer*)malloc(sizeof(struct customer)); // 동적할당
	newNode->next = NULL; // next를 NULL로 초기화 하고 
	return newNode; // newNode리턴
}

void insertNode(struct customer *cur)
{
	char tmp[14]; // 이름, 전화번호를 입력받을 문자열

	struct customer *newNode = getNode(); // 새 구조체를 동적할당

	scanf("%s", tmp); // 이름을 입력받고
	newNode->name = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 이름크기 만큼 동적할당
	strcpy(newNode->name, tmp); // 이름을 복사

	scanf("%s", tmp); // 전화번호 입력
	newNode->phone = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 전화번호크기 만큼 동적할당
	strcpy(newNode->phone, tmp); // 전화번호 복사

	strcpy(newNode->id, tmp + 9); // 전화번호 9번째 자리 ~ == id 복사

	while (cur->next != NULL)
		cur = cur->next; // 커서의 다음이 NULL이 아닐때까지 이동(마지막 노드까지 이동)

	cur->next = newNode; // 마지막노드 다음을 newNode로 설정
	return;
}

int main()
{
	int n, m, i, cnt = 0;

	struct customer *head = getNode(); // head노드 생성
	struct customer *p;

	scanf("%d", &n);

	for (i = 0; i < n; i++) // 갯수만큼 노드 삽입
		insertNode(head);

	scanf("%d", &m); // 전화번호 끝자리 입력

	for (p = head->next; p != NULL; p = p->next)
	{
		if ((p->id[3] - '0') == m) // 전화번호 끝자리를 찾으면
		{
			cnt++;
			printf("%s %s %d\n", p->name, p->phone, cnt); // 출력
		}
	}

	p = head->next;
	free(head);
	head = p;

	while (p != NULL)
	{
		p = p->next;
		free(head->name);
		free(head->phone);
		free(head);
		head = p;
	}

	//_CrtDumpMemoryLeaks();
	return 0;
}
===============================================================================================
문제 5-3

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//#include <crtdbg.h>  
#pragma warning (disable:4996)

//#define _CRTDBG_MAP_ALLOC #include <stdlib.h> #include <crtdbg.h>  
// 메모리 누수 확인 : https://msdn.microsoft.com/ko-kr/library/x98tx3cf.aspx

struct customer {
	char id[5];
	char *name;
	char *phone;
	struct customer *next;
}; // 고객 구조체

struct customer* getNode()
{
	struct customer *newNode = (struct customer*)malloc(sizeof(struct customer)); // 동적할당

	if (newNode == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return newNode; // NULL 리턴
	}

	newNode->next = NULL; // next를 NULL로 초기화 하고 
	return newNode; // newNode리턴
}

void insertNode(struct customer *cur)
{
	char tmp[14]; // 이름, 전화번호를 입력받을 문자열

	struct customer *newNode = getNode(); // 새 구조체를 동적할당

	scanf("%s", tmp); // 이름을 입력받고
	newNode->name = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 이름크기 만큼 동적할당

	if (newNode->name == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return;
	}
	strcpy(newNode->name, tmp); // 이름을 복사

	scanf("%s", tmp); // 전화번호 입력
	newNode->phone = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 전화번호크기 만큼 동적할당

	if (newNode->phone == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return;
	}
	strcpy(newNode->phone, tmp); // 전화번호 복사

	strcpy(newNode->id, tmp + 9); // 전화번호 9번째 자리 ~ == id 복사

	while (cur->next != NULL)
		cur = cur->next; // 커서의 다음이 NULL이 아닐때까지 이동(마지막 노드까지 이동)

	cur->next = newNode; // 마지막노드 다음을 newNode로 설정
	return;
}

void init(struct customer **head) // 맨처음 노드를 설정하기 위해 이중포인터로 입력
{
	char tmp[14]; // 이름, 전화번호를 입력받을 문자열

	struct customer *newNode = getNode(); // 새 구조체를 동적할당

	scanf("%s", tmp); // 이름을 입력받고
	newNode->name = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 이름크기 만큼 동적할당

	if (newNode->name == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return;
	}
	strcpy(newNode->name, tmp); // 이름을 복사

	scanf("%s", tmp); // 전화번호 입력
	newNode->phone = (char*)malloc(sizeof(char)*(strlen(tmp) + 1)); // 전화번호크기 만큼 동적할당

	if (newNode->phone == NULL) // NULL이면 메모리 할당 실패
	{
		printf("Not enough memory!"); // 에러표시
		return;
	}
	strcpy(newNode->phone, tmp); // 전화번호 복사

	strcpy(newNode->id, tmp + 9); // 전화번호 9번째 자리 ~ == id 복사

	*head = newNode; // head로 newNode를 가르킴
	return;
}

int main()
{
	int n, m, i, cnt = 0;

	struct customer *head = NULL; // head 생성
	struct customer *p = NULL;

	scanf("%d", &n);

	init(&head); // 첫번째 노드 삽입

	for (i = 0; i < n - 1; i++) // 갯수 - 1만큼 노드 삽입
		insertNode(head);

	scanf("%d", &m); // 찾을 id입력

	for (p = head; p != NULL; p = p->next)
	{
		if ((p->id[3] - '0') == m % 10) // 전화번호 끝자리를 찾으면
		{
			cnt++; // 끝자리가 같은 고객 수 증가

			if (atoi(p->id) == m) // id마저 같으면
				printf("%s %s %d\n", p->name, p->phone, cnt); // 출력
		}
	}

	p = head; // p로 맨처음을 가르키고
	head = head->next; // head는 다음으로 이동

	while (head != NULL) // head가 NULL일 되면 마지막노드빼고 전부 해제한 것
	{
		free(p->name); // 이름
		free(p->phone); // 전화번호
		free(p); // 해당 노드 해제
		p = head; // p를 다시 head로
		head = head->next; // head는 한칸 앞으로 이동
	}

	// head가 먼저 NULL에 도달했기에 마지막 노드는 해제 안됨 
	free(p->name);
	free(p->phone);
	free(p); // 마지막 노드 할당해제

	//_CrtDumpMemoryLeaks();
	return 0;
}