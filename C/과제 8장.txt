문제 1
#include<stdio.h>
#pragma warning(disable:4996)

void factor(int n) // int형 변수를 인자로 받는 함수입니다.
{
	int i;
	for (i = 1; i <= n; i++) // 1부터 n까지 반복합니다.
	{
		if (n%i == 0) // 나누어떨어지면 약수입니다.
			printf(" %d", i); // 약수일경우 출력합니다.
	}
	printf("\n");
}

int main()
{
	int n;
	
	while(1) // 무한반복하며 
	{
		scanf("%d", &n); // 숫자를 입력받고

		if (n < 1) // 1보다 작을 경우 반복문을 탈출합니다.
			break;

		factor(n); // factor함수를 호출하여 실행합니다.
	}
	
	return 0;
}
문제 2
#include<stdio.h>
#pragma warning(disable:4996)
void triangle(int n) // 삼각형을 출력할 함수입니다.
{	int i, j, k = 0;
	for (i = 1; i <= n; i++) // 총 n줄 출력합니다.
	{
		for (j = 0; j < n - i ; j++) // 공백은 n이 4일 때 3->2->1->0 만큼 생깁니다.
			printf(" ");// 첫째 줄에 n개만큼의 공백이 생기고 각 줄마다 1개씩 줄어듭니다.
		for (j = 0; j < i + k ; j++)  // 별은 n이 4일때 1->3->5->7 만큼 생깁니다.
			printf("*");// 첫째 줄에 1개의 별이 생기고 2씩 증가하며 별이 찍힙니다.
			
		k++; // i가 1씩 증가하므로 k도 1씩 증가시키면 총 2씩 증가시키며 별을 찍을 수 있습니다.
		printf("\n"); // 한줄 입력이 끝나면 다음 줄로 내려갑니다.
	}
}void reverse(int n) // 역삼각형을 출력할 함수입니다.
{	int i, j, k = 0;
	for (i = 1; i <= n; i++) // 총 n줄 출력합니다.
	{
		for (j = 1; j < i; j++) // 공백은 첫줄에 0개부터 1씩 증가합니다.
			printf(" ");
		for (j = 0; j < 2*n-i-k; j++) // 별은 첫줄에 2*n-1개부터 2개씩 줄어듭니다.
			printf("*");
		k++; 
		printf("\n"); // 한줄 입력이 끝나면 다음 줄로 내려갑니다
	}
}int main()
{	int n;
	scanf("%d", &n);
	if (n % 2 == 0) 
		triangle(n); // 짝수면 삼각형
	else
		reverse(n); // 홀수면 역삼각형을 출력합니다.
		return 0;
}
문제 3
#include<stdio.h>
#pragma warning(disable: 4996)

int f1(int x, int y) // 음료이름을 출력하고 잔돈을 반환합니다.
{
	if(x == 1) // 메뉴가 1이면
	{
		printf("Americano\n"); // 아메리카노를 출력하고
		return y - 500;  // 500원을 빼 리턴합니다.
	}
	else if (x == 2) // 메뉴가 2면
	{
		printf("Cafe Latte\n");  // 카페라떼를 출력하고
		return y - 400; // 400원을 빼고 리턴합니다.
	}
	else // 메뉴가 1,2,3밖에 없으므로 위 두가지가 아니면 
	{
		printf("Lemon Tea\n"); // 레몬 티를 출력하고 
		return y - 300; // 300원을 빼 리턴합니다. 
	}
}

int f2(int x) // 500원 잔돈 개수를 출력하고 나머지를 리턴하는 함수입니다. 
{
	printf("%d ", x / 500); // 500으로 나눈 몫은 500원짜리 동전의 개수입니다.
	return x % 500; // 나머지를 리턴합니다.
}

void f3(int x)
{
	printf("%d", x / 100); // 100으로 나눈 몫이 100원짜리 동전의 개수입니다.
}

int main()
{
	int n = 0, m = 0;
	int a = 0, b = 0;

	scanf("%d", &n); // 메뉴의 번호입니다.
	scanf("%d", &m); // 투입한 금액입니다.

	a = f1(n, m); // 메뉴판을 출력하고 잔돈을 a에 저장합니다. 
	b = f2(a); // 잔돈 a를 인자로 f2를 호출해 b에 저장합니다.
	f3(b); // b를 인자로 나머지 100원의 개수를 출력합니다.

	return 0;
}
문제 4-1
#include<stdio.h>
#pragma warning(disable:4996)

int factorial(int n)
{
	int i, a = 1;

	for (i = 1; i <= n; i++) // 1~n까지 반복하며 
	{
		a *= i; // a에 순서대로 곱해 
	}

	return a; // a를 리턴합니다
}

int main()
{
	int n;

	scanf("%d", &n); // 숫자를 입력받고

	printf("%d", factorial(n)); // 함수를 호출해 팩토리얼은 계산 후 출력합니다.

	return 0;
}
문제 4-2
#include<stdio.h>
#pragma warning(disable:4996)
int factorial(int n) // 팩토리얼을 계산하는 함수입니다.
{	int i, a = 1;
	for (i = 1; i <= n; i++) // 1~n까지 반복하며 
	{
		a *= i; // a에 순서대로 곱해 
	}
	return a; // a를 리턴합니다
}int combination(int n, int r) // 조합을 계산합니다. 
{	int a;
	a = factorial(n) / (factorial(r) * factorial(n - r)); // 조합의 공식대로 계산해 a에 저장합니다.
	return a; // a를 리턴합니다.
}int main()
{	int n, r;
	scanf("%d%d", &n, &r); // 숫자를 입력받고
	printf("%d", combination(n, r)); // 함수를 호출해 조합을 계산 후 출력합니다.
	return 0;
}
문제 4-3
#include<stdio.h>
#pragma warning(disable:4996)

int factorial(int n) // 팩토리얼을 계산하는 함수입니다.
{
	int i, a = 1;

	for (i = 1; i <= n; i++) // 1~n까지 반복하며 
	{
		a *= i; // a에 순서대로 곱해 
	}

	return a; // a를 리턴합니다
}

int combination(int n, int r) // 조합을 계산합니다. 
{
	int a;

	a = factorial(n) / (factorial(r) * factorial(n - r)); // 조합의 공식대로 계산해 a에 저장합니다.

	return a; // a를 리턴합니다.
}

void printPascal(int n)
{
	int i, j, k = 0;

	for (i = 0; i <= n; i++)
	{
		for (j = 0; j < n * 2 - k; j++) // 공백은 최초 2*n개 부터 2개씩 줄어듭니다.
			printf(" ");

		for (j = 0; j <= i; j++)
		{
			printf("   %d",combination(i, j)); // 각 자리는 앞에 3개의 공백을 두고있고 조합 함수를 호출하여 각 값을 출력합니다.
		}

		printf("\n");
		k += 2; // 공백은 2개씩 줄어듭니다.
	}
}

int main()
{
	int n;

	scanf("%d", &n); // 숫자를 입력받고

	printPascal(n); // 파스칼삼각형을 그리는 함수를 호출하여 그림을 완성합니다.

	return 0;
}
문제 5-1

#include<stdio.h>
#pragma warning(disable:4996)

int add_digits(int n)
{
	int sum = 0;

	while (n != 0) // n이 0이되면 반복문을 끝냅니다.
	{
		sum += n % 10; // 마지막 자리를 sum에 계속 더합니다.
		n /= 10; // n을 10으로 나누어 위에서 더한 값을 빼줍니다.
	}

	return sum; // 각자리수를 더한 sum을 리턴합니다.
}

int main()
{
	int n;

	scanf("%d", &n); // n을 입력받고

	printf("%d %d", n, add_digits(n)); // n과 각자리수를 더하는 함수를 호출해 출력합니다.

	return 0;
}
문제 5-2

#include<stdio.h>
#pragma warning(disable:4996)

int add_digits(int n)
{
	int sum = 0;

	while (n != 0) // n이 0이되면 반복문을 끝냅니다.
	{
		sum += n % 10; // 마지막 자리를 sum에 계속 더합니다.
		n /= 10; // n을 10으로 나누어 위에서 더한 값을 빼줍니다.
	}

	return sum; // 각자리수를 더한 sum을 리턴합니다.
}

int digitalRoot(int n)
{
	while (n / 10 != 0) // 각 자리수 합이 1자리가 되면 탈출합니다.
	{
		n = add_digits(n); // 각 자리수 합을 구해 n에 저장합니다.
	}

	return n; // 마지막까지 계산한 n이 디지털근이므로 n을 리턴합니다.
}

int main()
{
	int n;

	scanf("%d", &n); // n을 입력받고

	printf("%d", digitalRoot(n)); // 디지털 근 함수를 호출해 값을 출력합니다.

	return 0;
}

문제 5-3
#include<stdio.h>
#pragma warning(disable:4996)

int add_digits(int n)
{
	int sum = 0;

	while (n != 0) // n이 0이되면 반복문을 끝냅니다.
	{
		sum += n % 10; // 마지막 자리를 sum에 계속 더합니다.
		n /= 10; // n을 10으로 나누어 위에서 더한 값을 빼줍니다.
	}

	return sum; // 각자리수를 더한 sum을 리턴합니다.
}

int digitalRoot(int n)
{
	while (n / 10 != 0) // 각 자리수 합이 1자리가 되면 탈출합니다.
	{
		n = add_digits(n); // 각 자리수 합을 구해 n에 저장합니다.
	}

	return n; // 마지막까지 계산한 n이 디지털근이므로 n을 리턴합니다.
}

int main()
{
	int n, min[2], tmp;

	scanf("%d", &n); // 최초로 n을 입력받고

	min[0] = n; // n과 
	min[1] = digitalRoot(n); // n의 디지털 근을 min에 저장합니다.

	while(1) // 무한반복을 하며
	{
		scanf("%d", &n); // n을 입력받고

		if (n < 0)
			break; // n이 음수인 경우를 확인해 음수이면 탈출합니다.

		tmp = digitalRoot(n); // 최솟값 비교를 위해 임시변수 tmp에 n의 디지털 근을 저장합니다. 

		if (tmp < min[1]) // tmp가 min보다 작다면 
		{
			min[0] = n; // n과
			min[1] = tmp; // n의 디지털 근인 tmp를 min에 저장합니다.
		}
	}

	printf("%d %d", min[0], min[1]); // 디지털근이 가장 작은 수와 디지털 근을 출력합니다.

	return 0;
}
