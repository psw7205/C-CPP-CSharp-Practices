문제 1
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int i, j, n; // 반복문에서 사용할 i,j와 숫자를 입력받을 n입니다.

	while (1) 
	{
		scanf("%d", &n); // 숫자를 입력받습니다.

		if (n <= 1 || n % 2 == 0) // 1이하 정수 (1, 0, 음수)이거나 짝수일 경우 무한반복문을 탈출합니다.
			break;

		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++) // 2중반복문을 이용해 nxn 크기의 모양을 출력합니다. 
			{
				if (i == j || n - i - j == 1) // i와 j가 같을 때 (좌상단~우하단까지의 대각선)
					printf("O");			// n-i-j이 1일 때(우상단~좌하단까지 대각선)
				else  // O를 찍고 나머지 부분에 X를 찍습니다.
					printf("X");
			}
			printf("\n"); // 한줄의 출력이 끝나면 다음줄로 바꿔줍니다.
		}
	}

	return 0;
}
문제 2
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int i; // 반복문에서 사용할 i와
	char c[10]; // 문자를 입력받을 배열입니다. 

	for (i = 0; i < 10; i++)
		scanf("%c", &c[i]); // 반복문을 이용하여 배열에 숫자를 입력받습니다.

	for (i = 9; i > -1; i--) // 역순으로 출력하기에 9에서 0까지 반복문을 돌립니다.
	{
		if (c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u')
			continue; // 소문자 모음과
		else if (c[i] == 'A' || c[i] == 'E' || c[i] == 'I' || c[i] == 'O' || c[i] == 'U')
			continue; // 대문자 모음일때 건너 뜁니다. 
		else
		{
			if (c[i] >= 'A' && c[i] <= 'Z') // 만약 대문자라면
				printf("%c", c[i] - ('A' - 'a')); // A~a까지의 차를 빼줘 소문자로 변환하여 출력하고

			if (c[i] >= 'a' && c[i] <= 'z') // 소문자라면
				printf("%c", c[i] + ('A' - 'a')); // A~a까지의 차를 더해 대문자로 변환후 출력합니다.
		}
	}

	return 0;
}
문제 3
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int i, k, cnt = 0; // 반복문에서 사용할 i와 좌석의 첫위치를 기억할 k, 빈좌석을 카운트할 cnt입니다.
	int a[100] = { 0 }, s, n; // 좌석의 공백여부를 저장할 배열 a와 몇자리를 예약하는지 저장할 s, 총 몇개의 좌석이 있는지 저장할 n입니다.

	scanf("%d", &n); // 몇개의 좌석이 있는지 저장합니다.

	for (i = 0; i < n; i++)
	{
		scanf("%d", &a[i]); // n번 반복하여 좌석의 공백 여부를 입력합니다.
	}

	scanf("%d", &s); // 몇개의 좌석을 예약할지 저장합니다.

	i = 0; // 밑의 while문에서 i를 사용하기 위해 0으로 초기화합니다.

	while (i < n) // i가 배열의 마지막에 도달할 때까지 반복합니다.
	{
		if (a[i] == 0) // 처음 0이 나온다면 
		{
			k = i + 1; // 처음 0이 나온 인덱스 + 1이 좌석의 위치입니다.
			while (a[i] == 0 && i < n) // a[i]가 0이고 i가 배열의 끝이 아니라면 반복합니다.
			{
				i++; // i를 1증가시키고
				cnt++; // 빈좌석의 갯수를 세는 카운트도 1증가시킵니다.
				if (cnt == s) // 빈 좌석이 위에서 입력한 요구 좌석만큼 있다면 반복문을 탈출합니다.
					break;
			}
		}
		else // 0이 아니라면 공백이 아니므로 카운트를 초기화 하고 i를 1 증가시킵니다.
		{
			cnt = 0;
			i++;
		}

		if (cnt == s) // 위에서 cnt가 s와 같았을 때 이미 조건이 완료된 것이므로 반복문을 탈출합니다.
			break;
	}

	// 위에서 앞에서부터 순회하며 빈좌석과 연속된 좌석을 찾았고 요구한 좌석만큼 빈 좌석이 있을 때 바로 반복문을 탈출시켰습니다.

	if (cnt < s) // 카운트가 요구한 빈 좌석만큼 증가하지 못했다면 요구한 좌석만큼 연속된 자리가 없는 것이므로 0으로 바꿉니다.
		cnt = 0;

	switch(cnt)
	{
		case 0: // 카운트가 0일 때입니다.
			for (i = 0; i < n; i++)
			{
				if (a[i] == 0) // 카운트가 0이므로 배열을 처음부터 순회해가며 0일때마다 카운트를 1씩 증가시킵니다.
					cnt++;
			}
			printf("none\n"); //  none을 출력하고 총 공백 갯수를 출력합니다.
			printf("%d\n", cnt);
			break;
		case 1: // 요구한 좌석이 1개일 때 카운트도 1입니다. 위에서 좌석의 위치를 k에 저장했으므로 k를 출력합니다.
			printf("%d\n", k);
			break;
		case 2: // 카운트가 2일 때는 k와 그 다음 좌석까지 출력합니다.
			printf("%d %d\n", k, k + 1);
			break;
		case 3: // 카운트가 3일 때는 k와 연속된 2개의 좌석까지 출력합니다.
			printf("%d %d %d\n", k, k + 1, k + 2);
			break;
		default:
			break;
	}

	return 0;
}
문제 4
#include<stdio.h>
#pragma warning(disable:4996)
int main()
{	int n, a[9] = { 0 }, cnt[9] = { 0 }; // 숫자를 입력받을 n과 각 자리수를 저장할 배열 a, 각 자리수의 중복 개수를 저장할 배열 cnt입니다.
	int i = 0, j, size = 0, tmp = 0, max, idx; //반복문에서 사용할 i, j 와 총 몇자리인지 저장할 size, 중복이 없는 숫자의 개수를 저장할 tmp, 최고로 많이 중복된 숫자를 저장할 max, 그 위치를 저장할 idx 입니다.
	scanf("%d", &n); // 정수를 입력받습니다.
	while (n != 0) // n이 0이되면 각 자리수별로 저장이 완료된 것이므로 반복문을 끝냅니다.
	{
		a[i] = n % 10; // 정수의 마지막 자리를 저장하고
		n /= 10; // 저장한 숫자를 버립니다.
		i++; 
		size++; // 저장 할 때마다 사이즈를 증가시켜 총 몇자리 숫자인지 확인합니다.
	}
	// 나머지 연산부터 하기 때문에 자리수는 역순으로 저장되었습니다.
	for (i = 0; i < size; i++)
	{
		for(j = 0; j < size; j++)// 배열의 모든 인덱스를 확인하여 중복될 때마다 1씩 증가시킵니다.
		{
			if (a[j] == a[i]) 
			{
				cnt[i]++;  // 자기 자신이 같을 때도 증가시키기 때문에 중복이 없으면 1이 저장되고 중복이 있으면 중복이 있는 만큼 저장됩니다.
			}
		}
	}
	max = cnt[0]; // 각 자리수별로 중복 횟수를 저장한 cnt배열에서 가장 큰 수를 찾기 위해 cnt[0]를 max에 저장합니다.
	idx = 0; // 그 위치를 저장하기위해 idx에 0을 저장합니다.
	for (i = 0; i < size; i++) // 카운트 배열을 사이즈만큼 반복하며 확인합니다. 
	{
		if (cnt[i] == 1) // 카운트 배열의 숫자가 1이라면 중복이 없는 것이므로 tmp를 증가시킵니다.
			tmp++; //tmp변수는 중복이 없는 숫자의 갯수를 확인하기 위한 변수입니다.
		else
		{
			if (max < cnt[i]) // 중복 횟수가 더 많을 경우
			{
				max = cnt[i]; // 가장 많은 중복횟수를 갱신하고
				idx = i; // idx에 그 위치를 저장합니다.
			} 
		}
	}
		if (tmp == size) // 만약 tmp가 size와 같다면 모든 자리수에서 중복이 없는 것이므로
	{
		printf("NO\n"); // NO를 출력하고 
		for (j = 0; j < size; j++)
			printf("%d ", a[j]); // 자리수를 출력합니다. 애초에 역순으로 저장했으므로 그냥 출력합니다.
	}
	else // tmp가 size만큼 증가하지 못했다면 중간에 중복된 자리수가 있는 것이고
	{
		printf("YES\n"); // YES 출력 후
		printf("%d %d", a[idx] , cnt[idx]); // 위에서 저장한 idx로 가장 중복이 많이된 숫자와 그 중복횟수를 출력합니다. 
	}
	return 0;
}


문제 5
#include<stdio.h>
#pragma warning(disable:4996)

int isLeapYear(int year) // 윤년인지 계산할 함수입니다.
{
	if (year % 4 == 0 && year % 100 != 0) // 4로 나누어떨어지면서 100으로 나누어 떨어지지 않으면 윤년이므로 1을 리턴합니다.
		return 1;
	else if (year % 400 == 0) // 100으로 나누어떨어지긴 하지만 400으로도 나누어 떨어진다면 윤년입니다. 역시 1을 리턴합니다. 
		return 1;
	else // 위 경우들에 만족하지 않으면 평년입니다. 0을 리턴합니다.
		return 0;
}

int getTotalNumberOfLeapYear(int startYear, int endYear)
{
	int i, cnt = 0;

	for (i = startYear; i <= endYear; i++) // 시작년도와 마지막년도까지 1씩 증가시키며 isLeapYear함수를 사용해 윤년인지 확인합니다.
	{
		if (isLeapYear(i)) // 윤년이면 1이 리턴되고 참이므로 cnt를 증가시킵니다.
			cnt++;
	}
	return cnt; // cnt를 리턴합니다.
}
//아래는 문제에서 주어진 main함수입니다.
int main(void){ 
	int startYear = 0, endYear = 0;
	scanf("%d%d", &startYear, &endYear);
	printf("%d", getTotalNumberOfLeapYear(startYear, endYear));
	return 0;
}