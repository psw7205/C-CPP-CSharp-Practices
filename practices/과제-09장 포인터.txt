문제 1
#include <stdio.h>
#pragma warning (disable:4996)

void maxmin(int* x); // 함수 선언부입니다.

int main()
{
	int ar[100] = { 0 }; // 배열 ar을 만들고 0으로 초기화합니다.
	int* pa = ar; // 배열 대신 사용할 포인터 pa를 만들고 배열 ar의 대표주소로 초기화합니다.
	int i = 0; // 반복문에서 인덱스로 사용할 변수 i입니다.

	while (1) // 무한반복을 하며
	{
		scanf("%d", pa + i); // 포인터를 이용해 값을 입력받고

		if (*(pa + i) == 0) // 값이 0인 경우 탈출합니다.
		{
			break;
		}

		i++; // 다음 칸으로 증가시킵니다.
	}

	maxmin(ar); // maxmin함수를 호출합니다.

	printf("%d %d", *pa, *(pa + 1)); // 최대, 최솟값을 출력합니다.

	return 0;
}

void maxmin(int* x)
{
	int max = 0, min = 0; // 최댓값과 최솟값을 저장할 변수 max와 min입니다.
	int* p; //반복문에서 사용할 포인터입니다.

	max = min = *x; //배열의 첫번째 자리 값을 max와 min에 저장합니다

	for (p = x; *p != 0; p++) // 입력을 0까지 받으므로 0이 아닐동안 반복합니다.
	{
		if (*p >= max)
		{
			max = *p; // max보다 *p가 크면 max에 저장하고
		}

		if (*p <= min)
		{
			min = *p; // min보다 *p가 작으면 min에 저장해 최대 최소를 구합니다.		}
		}
	}
	*x = max; // 배열의 첫번째 자리에 최댓값을 저장합니다.
	*(x + 1) = min; // 두번째 자리에 최솟값을 저장합니다.

	return; // 반환형이 없기에 아무것도 리턴하지 않습니다.
}

=================================================================================================
문제 2
#include <stdio.h>
#pragma warning (disable:4996)

int main()
{
	char ar[100] = { '\0' };
	char* pa = ar; // 배열 대신 사용할 포인터 pa를 만들고 배열 ar의 대표주소로 초기화합니다.
	int i = 0; // 반복문에서 인덱스로 사용할 변수 i입니다.

	while (1) // 무한반복을 하며
	{
		scanf("%c", pa + i); // 포인터를 이용해 값을 입력받고

		if (*(pa + i) == '*') // 값이 '*'인 경우 탈출합니다.
		{
			break;
		}

		i++; // 다음 칸으로 증가시킵니다.
	}
	// i가 입력받은 문자 갯수 만큼 증가했고 마지막 문자는 *이므로 마지막 전 인덱스부터 시작합니다.
	pa = ar + i - 1;

	while (1) // 무한반복을 하며 역순으로 출력하고 첫인덱스까지 도달하면 '*'를 출력 후 종료합니다.
	{
		if (*pa == 'a' || *pa == 'e' || *pa == 'i' || *pa == 'o' || *pa == 'u' ||
			*pa == 'A' || *pa == 'E' || *pa == 'I' || *pa == 'O' || *pa == 'U')
		{
			printf("%c%c", *pa, *pa); // 배열의 값이 모음이면 두개를 출력하고
		}
		else
		{
			printf("%c", *pa); // 아니라면 1개만 출력합니다.
		}

		if (pa == ar)
		{
			printf("*");
			break;
		}
		pa--; // 뒤에서부터 1칸씩 감소시킵니다.
	}

	return 0;
}
=============================================================================================
문제 3

#include <stdio.h>
#pragma warning (disable:4996)

void input(char* p, int N);
void upper(char* p, int N);
void lower(char* p, int N);
int DOUBLE(char* p, int N); // 각 함수의 원형입니다.

int main()
{
	char ar[20]; // 문자들을 입력받을 배열입니다.
	int N = 0; // 문자가 몇개인지 입력받는 변수 N입니다.
	int result; // DOUBLE함수의 결과를 받을 변수입니다.

	scanf("%d", &N); // 정수를 입력받습니다.
	getchar(); // 버퍼에 남아있는 '/n'을 지워주는 getchar()함수입니다.

	input(ar, N); // input함수를 호출해 문자를 입력받습니다.
	upper(ar, N); // upper함수를 이용해 대문자만 출력합니다.
	lower(ar, N); // lower함수를 이용해 소문자만 출력합니다.
	result = DOUBLE(ar, N); // 숫자에 2배를 곱해 result에 저장합니다.

	printf("%d", result); // DOUBLE함수의 결과를 출력합니다.

	return 0;
}

void input(char* p, int N)
{
	char* pa = p;

	for (pa = p; pa < p + N; pa++) // 포인터를 이용해 배열을 순회하며 
	{
		scanf("%c", pa); // 문자를 입력받습니다.
	}

	return;
}

void upper(char* p, int N)
{
	char* pa = p;

	for (pa = p; pa < p + N; pa++) // 포인터를 이용해 배열을 순회하며 
	{
		if (*pa >= 'A' && *pa <= 'Z') // 대문자일 경우 
		{
			printf("%c", *pa); // 출력합니다.
		}
	}
	printf("\n");

	return;
}

void lower(char* p, int N)
{
	char* pa = p;

	for (pa = p; pa < p + N; pa++) // 포인터를 이용해 배열을 순회하며 
	{
		if (*pa >= 'a' && *pa <= 'z') // 소문자일 경우
		{
			printf("%c", *pa); // 출력합니다.
		}
	}
	printf("\n");

	return;
}

int DOUBLE(char* p, int N)
{
	char* pa = p;
	int tmp = 0; // 숫자만 따로 저장할 변수 tmp입니다.

	for (pa = p; pa < p + N; pa++) // 포인터를 이용해 배열을 순회하며 
	{
		if (*pa >= '0' && *pa <= '9') // 숫자일 경우
		{
			tmp = tmp * 10 + (*pa - '0'); // tmp * 10을 해 한 자리씩 늘린 뒤
			// - '0' 을 통해 숫자로 바꾼 뒤 tmp에 더해줍니다.
		}
	}

	return tmp * 2; // 2배를 곱해 리턴합니다.
}

=============================================================================================
문제 4
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	int a[10] = { 0 };
	int b[10] = { 0 }; // 정수를 입력받을 배열 a,b입니다.
	int n = 0, m = 0, tmp = 0, i = 0; // 갯수를 파악할 n,m과 스왚시 사용할 tmp, 반복문에서 사용할 i입니다.
	int* pa = a;
	int* pb = b; // 배열 대신 사용할 포인터 pa와 pb입니다.

	while (1)
	{
		scanf("%d", pa); //무한 반복문을 돌며 배열 a에 값을 저장합니다.
		if (*pa == 0) // 0이 입력되면 무한반복문을 탈출합니다.
		{
			break;
		}
		pa++; // 0이 아니면 다음 인덱스로 증가시키고
		n++; // 몇개 입력되었는지도 카운트합니다.
	}

	while (1) // 위와 같은 방식으로 배열 b에 정수를 입력받습니다.
	{
		scanf("%d", pb);
		if (*pb == 0)
		{
			break;
		}
		pb++;
		m++;
	}

	/*
	1. 처음 배열 a를 저장해 내림차순으로 정렬합니다.

	2. 이중 반복문을 이용해
	a[0]와 b[0]~b[m-1]을 비교하며 배열 b에서 더 큰값이 나오면 a[0]와 스왚
	a[1]과 b[0]~b[m-1]을 비교하며 배열 b에서 더 큰값이 나오면 a[1]와 스왚
	...
	a[n-1]과 과 b[0]~b[m-1]을 비교하며 배열 b에서 더 큰값이 나오면 a[n-1]와 스왚
	위와 같은 방식으로 배열 a, b 모두를 포함해 가장 큰 n개를 내림차순으로 정렬 시켰습니다.

	3. 배열 a의 정렬이 끝나면 배열 b는 배열 a보다 작은 값들로만 구성되므로
	배열 b만 새로 오름차순 정렬 시키면 문제가 해결됩니다.
	*/

	//1. 버블정렬과 같은 원리로 배열 a를 내림차순 정렬했습니다.
	for (pa = a; pa < a + (n - 1); pa++)
	{
		for (pb = a; pb < a + (n - 1 - i); pb++) // 이중 반복문을 돌며
		{
			if (*pb < *(pb + 1)) // 작은 숫자를 오른쪽으로 보냅니다.
			{
				tmp = *pb;
				*pb = *(pb + 1);
				*(pb + 1) = tmp;
			}
		}
		i++;
	}

	//2. 이중반복문을 이용해 배열 a와 배열 b를 모두 비교하며 배열 a를 새로 정렬합니다.
	for (pa = a; pa < a + n; pa++)
	{
		for (pb = b; pb < b + m; pb++) // 배열 b의 순회는 항상 처음부터 끝까지 하므로 
		{
			if (*pa < *pb) // 배열 b에 더 큰값과 
			{
				tmp = *pb; // 배열 a에 원소와 스왚해도
				*pb = *pa; // 뒤에서 다시 스왚되므로
				*pa = tmp; // 배열 a는 제대로 정렬됩니다.
			}
		}
	}

	i = 0; // i를 다시 사용하기 위해 0으로 초기화합니다.

	//3. 정렬된 배열 a보다 작은 숫자들만 있기 때문에 배열 b만 새로 정렬합니다.
	for (pa = b; pa < b + (m - 1); pa++)
	{
		for (pb = b; pb < b + (m - 1 - i); pb++) // 버블정렬과 같은 방법으로
		{
			if (*pb > *(pb + 1)) // 배열 b를 오름차순 정렬합니다.
			{
				tmp = *pb;
				*pb = *(pb + 1);
				*(pb + 1) = tmp;
			}
		}
		i++;
	}

	for (pa = a; pa < a + n; pa++)
	{
		printf("%d ", *pa); // 내림차순 정렬된 배열 a를 출력합니다.
	}

	printf("\n");

	for (pb = b; pb < b + m; pb++)
	{
		printf("%d ", *pb); // 오름차순 정렬된 배열 b를 출력합니다.
	}

	return 0;
}
=============================================================================================
문제 5
#include<stdio.h>
#pragma warning(disable:4996)

int main()
{
	char ar[1000] = { '\0' }; // 문장을 입력받을 배열입니다.
	char* pa = ar; // 배열을 사용할 포인터입니다.
	char* tmp; // 이중반복문에서 사용할 포인터입니다.
	int cnt = 0, i = 0; // 단어를 셀 cnt, 문장의 총 길이를 셀 i입니다.

	while (1) // 무한반복문을 돌며
	{
		scanf("%c", pa); // 문자를 입력받습니다.

		if (*pa == '.' || *pa == '?' || *pa == '!')
		{
			break; // 문자가 '.','?','!'라면 입력을 그만 받습니다. 
		}

		pa++; // 위 경우가 아니라면 다음 칸으로 이동합니다.
		i++; // 문장의 길이를 세는 변수입니다.
	}

	// '.','?','!'는 배열에 저장되지만 i가 증가하지는 않기 때문에 배열의 마지막 전 인덱스가 i입니다.
	for (pa = ar + i; pa >= ar; pa--) // 마지막 전 인덱스부터 줄어듭니다.
	{
		if (*pa == ' ') // 줄어들다가 공백을 만나면
		{
			for (tmp = pa + 1; tmp < pa + cnt; tmp++) // 지금 *pa는 ' '이기 때문에 *(pa+1)부터  출력합니다.
			{
				printf("%c", *tmp);
			}
			printf(" "); // 한 단어가 끝나면 " "을 출력하고 
			cnt = 0; // 단어의 알파벳 수를 세던 변수 cnt는 0으로 초기화합니다.
		}

		if (pa == ar) // 배열의 처음까지 도달할 경우입니다.
		{
			for (tmp = pa; tmp < pa + cnt; tmp++) // 이 경우 *pa는 맨 첫 알파벳이므로 같이 출력합니다.
			{
				printf("%c", *tmp);
			}
			printf("%c", *(ar + i)); // 마지막 단어가 끝나면 종료문자를 출력해 문장을 마무리합니다.
		}

		cnt++; // 단어가 알파벳 몇개로 구성되어 있는지 1씩 증가시키며 셉니다. 
	}

	return 0;
}

